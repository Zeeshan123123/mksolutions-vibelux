server {
    listen 80 default_server;
    listen [::]:80 default_server;
    
    server_name _;
    root /usr/share/nginx/html;
    index index.html;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-Platform "VibeLux" always;
    add_header X-Version "2.0.0" always;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Cache control for static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }

    # Health check endpoints
    location /health {
        alias /usr/share/nginx/html/health.json;
        add_header Content-Type application/json;
        access_log off;
    }
    
    location /api/health {
        alias /usr/share/nginx/html/api/health;
        add_header Content-Type application/json;
        access_log off;
    }

    # Main VibeLux application
    location / {
        try_files $uri $uri/ /index.html;
        
        # Cache control for HTML files
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # API routes placeholder (for future expansion)
    location /api/ {
        return 200 '{"message":"VibeLux API Gateway","version":"2.0.0","features":1600,"endpoints":437,"status":"operational"}';
        add_header Content-Type application/json;
    }

    # Error pages
    error_page 404 /404.html;
    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
}