import { NextResponse } from 'next/server';
import { auth, clerkClient } from '@clerk/nextjs/server';
import { logger } from '@/lib/logging/production-logger';
import { prisma } from '@/lib/prisma';

export async function GET() {
  try {
    const { userId } = auth();
    
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Get user data
    const user = await prisma.user.findUnique({
      where: { id: userId },
      include: {
        subscription: true,
        creditBalance: true,
        creditTransactions: true,
        projects: true,
        teamMemberships: true,
        invitations: true,
      }
    });

    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 });
    }

    // Export data structure
    const exportData = {
      user: {
        id: user.id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        createdAt: user.createdAt,
        updatedAt: user.updatedAt,
        subscriptionTier: user.subscriptionTier,
        lastLoginAt: user.lastLoginAt,
      },
      subscription: user.subscription,
      creditBalance: user.creditBalance,
      creditTransactions: user.creditTransactions,
      projects: user.projects?.map(project => ({
        id: project.id,
        name: project.name,
        description: project.description,
        createdAt: project.createdAt,
        updatedAt: project.updatedAt,
        // Remove sensitive data
        data: project.data ? 'Design data available' : null,
      })),
      teamMemberships: user.teamMemberships,
      invitations: user.invitations,
      exportedAt: new Date().toISOString(),
      exportVersion: '1.0',
    };

    // Return as downloadable JSON
    return new NextResponse(JSON.stringify(exportData, null, 2), {
      headers: {
        'Content-Type': 'application/json',
        'Content-Disposition': `attachment; filename="vibelux-data-export-${userId}-${new Date().toISOString().split('T')[0]}.json"`,
      },
    });
  } catch (error) {
    logger.error('api', 'Data export error:', error );
    return NextResponse.json({ error: 'Export failed' }, { status: 500 });
  }
}