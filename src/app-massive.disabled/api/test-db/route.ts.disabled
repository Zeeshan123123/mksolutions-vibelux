import { NextResponse } from "next/server"
import { PrismaClient } from '@prisma/client'
import { logger } from '@/lib/logging/production-logger';

export async function GET() {
  let prisma: PrismaClient | null = null;
  
  try {
    logger.info('api', 'üîç Testing database connection...')
    
    // Log environment info
    const envInfo = {
      nodeEnv: process.env.NODE_ENV,
      hasDbUrl: !!process.env.DATABASE_URL,
      dbUrlPrefix: process.env.DATABASE_URL?.substring(0, 20) + '...',
      timestamp: new Date().toISOString()
    }
    logger.info('api', 'Environment:', { data: envInfo })
    
    // Initialize Prisma with detailed logging
    prisma = new PrismaClient({
      log: ['query', 'info', 'warn', 'error'],
    })
    
    logger.info('api', '‚úÖ Prisma client created')
    
    // Test connection
    await prisma.$connect()
    logger.info('api', '‚úÖ Connected to database')
    
    // Simple query
    const result = await prisma.$queryRaw`SELECT 1 as test`
    logger.info('api', '‚úÖ Query executed:', { data: result })
    
    // Count auctions
    const auctionCount = await prisma.auction.count()
    logger.info('api', '‚úÖ Auction count:', { data: auctionCount })
    
    return NextResponse.json({
      success: true,
      environment: envInfo,
      auctionCount,
      message: 'Database connection successful'
    })
    
  } catch (error) {
    logger.error('api', '‚ùå Database test failed:', error )
    
    const errorInfo = {
      name: error instanceof Error ? error.name : 'Unknown',
      message: error instanceof Error ? error.message : 'Unknown error',
      code: (error as any)?.code,
      stack: error instanceof Error ? error.stack : undefined
    }
    
    return NextResponse.json({
      success: false,
      error: errorInfo,
      environment: {
        nodeEnv: process.env.NODE_ENV,
        hasDbUrl: !!process.env.DATABASE_URL,
        dbUrlPrefix: process.env.DATABASE_URL?.substring(0, 20) + '...'
      }
    }, { status: 500 })
    
  } finally {
    if (prisma) {
      await prisma.$disconnect()
      logger.info('api', 'üîå Disconnected from database')
    }
  }
}