"use client"

import { useState, useRef } from 'react'
import { 
  Camera,
  Upload,
  Scan,
  AlertTriangle,
  CheckCircle,
  Info,
  Calendar,
  TrendingUp,
  Activity,
  Leaf,
  Bug,
  Droplets,
  Sun,
  Download,
  Share2,
  Clock,
  Target,
  Eye,
  ZoomIn,
  Grid3x3,
  Ruler,
  Maximize2,
  Loader2,
  Bot,
  Sparkles,
  X
} from 'lucide-react'
import { PlantHealthUpload } from './CloudinaryUpload'

interface HealthIssue {
  id: string
  type: 'nutrient' | 'pest' | 'disease' | 'environmental'
  severity: 'low' | 'medium' | 'high' | 'critical'
  confidence: number
  name: string
  description: string
  location: { x: number; y: number; width: number; height: number }
  recommendations: string[]
}

interface PlantAnalysis {
  id: string
  timestamp: string
  overallHealth: number
  growthStage: string
  issues: HealthIssue[]
  measurements: {
    height: number
    canopyWidth: number
    leafArea: number
    chlorophyllContent: number
    stressIndex: number
  }
  predictions: {
    daysToHarvest: number
    expectedYield: number
    optimalHarvestWindow: string
  }
}

interface CameraZone {
  id: string
  name: string
  cameraCount: number
  lastCapture: string
  healthScore: number
  activeIssues: number
}

export function PlantHealthImaging() {
  const [selectedZone, setSelectedZone] = useState<string>('zone-1')
  const [viewMode, setViewMode] = useState<'live' | 'analysis' | 'history'>('live')
  const [selectedImage, setSelectedImage] = useState<string | null>(null)
  const [isCapturing, setIsCapturing] = useState(false)
  const [showHeatmap, setShowHeatmap] = useState(false)
  const fileInputRef = useRef<HTMLInputElement>(null)
  
  // Cloudinary AI Analysis states
  const [aiAnalysisResults, setAiAnalysisResults] = useState<any>(null)
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [enhancedImageUrl, setEnhancedImageUrl] = useState<string | null>(null)
  const [aiAnalysisHistory, setAiAnalysisHistory] = useState<any[]>([])
  const [showAiResults, setShowAiResults] = useState(false)
  
  // Growth time-lapse states
  const [timelapseImages, setTimelapseImages] = useState<string[]>([])
  const [isGeneratingTimelapse, setIsGeneratingTimelapse] = useState(false)
  const [timelapseUrl, setTimelapseUrl] = useState<string | null>(null)
  const [showTimelapseModal, setShowTimelapseModal] = useState(false)

  // Camera zones
  const cameraZones: CameraZone[] = [
    {
      id: 'zone-1',
      name: 'Flowering A',
      cameraCount: 12,
      lastCapture: '5 min ago',
      healthScore: 94,
      activeIssues: 2
    },
    {
      id: 'zone-2',
      name: 'Vegetative 1',
      cameraCount: 8,
      lastCapture: '12 min ago',
      healthScore: 98,
      activeIssues: 0
    },
    {
      id: 'zone-3',
      name: 'Flowering B',
      cameraCount: 12,
      lastCapture: '3 min ago',
      healthScore: 87,
      activeIssues: 5
    }
  ]

  // Mock analysis data
  const latestAnalysis: PlantAnalysis = {
    id: 'analysis-001',
    timestamp: new Date().toISOString(),
    overallHealth: 92,
    growthStage: 'Late Flowering',
    issues: [
      {
        id: 'issue-1',
        type: 'nutrient',
        severity: 'medium',
        confidence: 87,
        name: 'Calcium Deficiency',
        description: 'Brown spots on upper fan leaves indicate calcium deficiency',
        location: { x: 145, y: 230, width: 80, height: 60 },
        recommendations: [
          'Increase Cal-Mag supplement to 2ml/L',
          'Check pH levels (should be 5.8-6.2)',
          'Ensure proper air circulation'
        ]
      },
      {
        id: 'issue-2',
        type: 'pest',
        severity: 'low',
        confidence: 92,
        name: 'Thrips Damage',
        description: 'Silver streaks on leaves indicate early thrips infestation',
        location: { x: 320, y: 180, width: 100, height: 75 },
        recommendations: [
          'Apply neem oil spray (preventive)',
          'Introduce beneficial insects (Amblyseius cucumeris)',
          'Monitor with sticky traps'
        ]
      }
    ],
    measurements: {
      height: 124, // cm
      canopyWidth: 86, // cm
      leafArea: 2840, // cmÂ²
      chlorophyllContent: 42.3, // SPAD units
      stressIndex: 0.23 // 0-1 scale
    },
    predictions: {
      daysToHarvest: 14,
      expectedYield: 186, // grams
      optimalHarvestWindow: '12-16 days'
    }
  }

  const handleCapture = async () => {
    setIsCapturing(true)
    // Simulate capture delay
    setTimeout(() => {
      setIsCapturing(false)
      setViewMode('analysis')
    }, 2000)
  }

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      // Handle file upload
      setViewMode('analysis')
    }
  }

  // Cloudinary AI Analysis Handler
  const handleAiAnalysis = async (uploadResult: any) => {
    setIsAnalyzing(true)
    setShowAiResults(true)
    setEnhancedImageUrl(uploadResult.secure_url)
    
    try {
      const response = await fetch('/api/ai/plant-analysis', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          imageUrl: uploadResult.secure_url
        })
      })

      if (!response.ok) {
        throw new Error('Analysis failed')
      }

      const analysisData = await response.json()
      
      // Update state with AI results
      setAiAnalysisResults(analysisData)
      
      // Add to history
      const newAnalysis = {
        id: `analysis-${Date.now()}`,
        timestamp: new Date().toISOString(),
        imageUrl: uploadResult.secure_url,
        enhancedUrl: analysisData.enhancedImageUrl,
        results: analysisData,
        healthScore: analysisData.healthScore || 85,
        issueCount: analysisData.detectedIssues?.length || 0
      }
      
      setAiAnalysisHistory(prev => [newAnalysis, ...prev.slice(0, 9)]) // Keep last 10
      
      // Add image to time-lapse collection
      setTimelapseImages(prev => [...prev, uploadResult.secure_url])
      
      // Switch to analysis view
      setViewMode('analysis')
      
    } catch (error) {
      console.error('AI analysis error:', error)
      alert('Failed to analyze image. Please try again.')
    } finally {
      setIsAnalyzing(false)
    }
  }

  const handleGenerateTimelapse = async () => {
    if (timelapseImages.length < 2) {
      alert('Need at least 2 images to create a time-lapse video.');
      return;
    }

    setIsGeneratingTimelapse(true);
    
    try {
      const response = await fetch('/api/cloudinary/create-timelapse', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          imageUrls: timelapseImages,
          plantInfo: {
            zone: selectedZone,
            crop: 'cannabis', // Could be dynamic
            startDate: aiAnalysisHistory[aiAnalysisHistory.length - 1]?.timestamp,
            endDate: aiAnalysisHistory[0]?.timestamp
          }
        })
      });

      if (!response.ok) {
        throw new Error('Time-lapse generation failed');
      }

      const timelapseData = await response.json();
      setTimelapseUrl(timelapseData.videoUrl);
      
      // Store additional video quality options
      if (timelapseData.hdVideoUrl) {
        localStorage.setItem('timelapse_hd', timelapseData.hdVideoUrl);
      }
      if (timelapseData.mobileVideoUrl) {
        localStorage.setItem('timelapse_mobile', timelapseData.mobileVideoUrl);
      }
      
      setShowTimelapseModal(true);

    } catch (error) {
      console.error('Time-lapse generation error:', error);
      alert('Failed to generate time-lapse. Please try again.');
    } finally {
      setIsGeneratingTimelapse(false);
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-gray-900 rounded-xl border border-gray-800 p-6">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h2 className="text-xl font-semibold text-white">Plant Health Imaging & Analysis</h2>
            <p className="text-sm text-gray-400 mt-1">
              AI-powered visual inspection and early issue detection
            </p>
          </div>
          <div className="flex items-center gap-3">
            <button
              onClick={() => fileInputRef.current?.click()}
              className="px-4 py-2 bg-gray-800 hover:bg-gray-700 text-white rounded-lg transition-colors flex items-center gap-2"
            >
              <Upload className="w-4 h-4" />
              Upload Image
            </button>
            <input
              ref={fileInputRef}
              type="file"
              accept="image/*"
              onChange={handleFileUpload}
              className="hidden"
            />
            <PlantHealthUpload 
              onUpload={handleAiAnalysis}
              loading={isAnalyzing}
            />
            <button
              onClick={handleCapture}
              disabled={isCapturing}
              className="px-4 py-2 bg-gray-700 hover:bg-gray-600 disabled:bg-gray-800 text-white rounded-lg transition-colors flex items-center gap-2"
            >
              <Camera className="w-4 h-4" />
              {isCapturing ? 'Capturing...' : 'Capture All Zones'}
            </button>
            <button
              onClick={handleGenerateTimelapse}
              disabled={isGeneratingTimelapse || timelapseImages.length < 2}
              className="px-4 py-2 bg-gradient-to-r from-green-600 to-teal-600 hover:from-green-700 hover:to-teal-700 disabled:opacity-50 disabled:cursor-not-allowed text-white rounded-lg transition-colors flex items-center gap-2"
            >
              {isGeneratingTimelapse ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  Creating...
                </>
              ) : (
                <>
                  ð¬
                  Time-lapse ({timelapseImages.length})
                </>
              )}
            </button>
          </div>
        </div>

        {/* View Mode Tabs */}
        <div className="flex gap-2">
          {(['live', 'analysis', 'history'] as const).map((mode) => (
            <button
              key={mode}
              onClick={() => setViewMode(mode)}
              className={`px-4 py-2 rounded-lg transition-colors capitalize ${
                viewMode === mode
                  ? 'bg-purple-600 text-white'
                  : 'bg-gray-800 text-gray-400 hover:text-white'
              }`}
            >
              {mode === 'live' && <Camera className="w-4 h-4 inline mr-1" />}
              {mode === 'analysis' && <Bot className="w-4 h-4 inline mr-1" />}
              {mode === 'history' && <Clock className="w-4 h-4 inline mr-1" />}
              {mode} {mode === 'live' ? 'View' : mode === 'analysis' ? 'Results' : ''}
              {mode === 'analysis' && aiAnalysisResults && (
                <Sparkles className="w-3 h-3 inline ml-1 text-yellow-400" />
              )}
            </button>
          ))}
        </div>
      </div>

      {/* Zone Selection */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {cameraZones.map((zone) => (
          <button
            key={zone.id}
            onClick={() => setSelectedZone(zone.id)}
            className={`p-4 rounded-lg border transition-all ${
              selectedZone === zone.id
                ? 'bg-purple-600 border-purple-500 shadow-lg shadow-purple-600/20'
                : 'bg-gray-900 border-gray-800 hover:border-gray-700'
            }`}
          >
            <div className="flex items-center justify-between mb-2">
              <h3 className="font-medium text-white">{zone.name}</h3>
              <span className={`text-2xl font-bold ${
                zone.healthScore >= 95 ? 'text-green-400' :
                zone.healthScore >= 85 ? 'text-yellow-400' :
                'text-red-400'
              }`}>
                {zone.healthScore}%
              </span>
            </div>
            <div className="flex items-center justify-between text-sm">
              <span className="text-gray-400">{zone.cameraCount} cameras</span>
              <span className="text-gray-400">{zone.lastCapture}</span>
            </div>
            {zone.activeIssues > 0 && (
              <div className="mt-2 flex items-center gap-2">
                <AlertTriangle className="w-4 h-4 text-yellow-400" />
                <span className="text-sm text-yellow-400">{zone.activeIssues} issues detected</span>
              </div>
            )}
          </button>
        ))}
      </div>

      {/* Main Content Area */}
      {viewMode === 'live' && (
        <div className="bg-gray-900 rounded-xl border border-gray-800 p-6">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {[1, 2, 3, 4, 5, 6, 7, 8].map((cam) => (
              <div key={cam} className="relative bg-gray-800 rounded-lg overflow-hidden aspect-video">
                <div className="absolute inset-0 flex items-center justify-center">
                  <Camera className="w-12 h-12 text-gray-600" />
                </div>
                <div className="absolute top-2 left-2 px-2 py-1 bg-black/50 rounded text-xs text-white">
                  Camera {cam}
                </div>
                <div className="absolute bottom-2 right-2 px-2 py-1 bg-green-500/20 rounded text-xs text-green-400">
                  Live
                </div>
              </div>
            ))}
          </div>
          <div className="mt-4 flex items-center justify-between">
            <div className="flex items-center gap-4">
              <button className="px-3 py-1 bg-gray-800 hover:bg-gray-700 rounded-lg text-sm text-white transition-colors">
                <Grid3x3 className="w-4 h-4 inline mr-1" />
                Grid View
              </button>
              <button className="px-3 py-1 bg-gray-800 hover:bg-gray-700 rounded-lg text-sm text-white transition-colors">
                <ZoomIn className="w-4 h-4 inline mr-1" />
                Focus Mode
              </button>
            </div>
            <span className="text-sm text-gray-400">
              <Clock className="w-4 h-4 inline mr-1" />
              Auto-capture every 30 minutes
            </span>
          </div>
        </div>
      )}

      {viewMode === 'analysis' && (
        <>
          {/* Analysis Overview */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="bg-gray-900 rounded-xl border border-gray-800 p-4">
              <div className="flex items-center gap-2 mb-2">
                <Activity className="w-5 h-5 text-green-400" />
                <h4 className="font-medium text-white">Overall Health</h4>
              </div>
              <p className="text-3xl font-bold text-white">
                {aiAnalysisResults?.healthScore || latestAnalysis.overallHealth}%
              </p>
              <p className="text-sm text-gray-400 mt-1">
                {aiAnalysisResults ? 'AI Analysis' : latestAnalysis.growthStage}
              </p>
            </div>
            <div className="bg-gray-900 rounded-xl border border-gray-800 p-4">
              <div className="flex items-center gap-2 mb-2">
                <Target className="w-5 h-5 text-blue-400" />
                <h4 className="font-medium text-white">Expected Yield</h4>
              </div>
              <p className="text-3xl font-bold text-white">{latestAnalysis.predictions.expectedYield}g</p>
              <p className="text-sm text-gray-400 mt-1">per plant average</p>
            </div>
            <div className="bg-gray-900 rounded-xl border border-gray-800 p-4">
              <div className="flex items-center gap-2 mb-2">
                <Calendar className="w-5 h-5 text-purple-400" />
                <h4 className="font-medium text-white">Days to Harvest</h4>
              </div>
              <p className="text-3xl font-bold text-white">{latestAnalysis.predictions.daysToHarvest}</p>
              <p className="text-sm text-gray-400 mt-1">{latestAnalysis.predictions.optimalHarvestWindow}</p>
            </div>
            <div className="bg-gray-900 rounded-xl border border-gray-800 p-4">
              <div className="flex items-center gap-2 mb-2">
                <AlertTriangle className="w-5 h-5 text-yellow-400" />
                <h4 className="font-medium text-white">Detected Issues</h4>
              </div>
              <p className="text-3xl font-bold text-white">
                {aiAnalysisResults?.detectedIssues?.length || latestAnalysis.issues.length}
              </p>
              <p className="text-sm text-gray-400 mt-1">
                {aiAnalysisResults ? 'AI Detected' : 'Standard Analysis'}
              </p>
            </div>
          </div>

          {/* Image Analysis View */}
          <div className="bg-gray-900 rounded-xl border border-gray-800 p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-white">Visual Analysis</h3>
              <div className="flex items-center gap-2">
                <button
                  onClick={() => setShowHeatmap(!showHeatmap)}
                  className={`px-3 py-1 rounded-lg text-sm transition-colors ${
                    showHeatmap
                      ? 'bg-purple-600 text-white'
                      : 'bg-gray-800 text-gray-400 hover:text-white'
                  }`}
                >
                  <Activity className="w-4 h-4 inline mr-1" />
                  Stress Heatmap
                </button>
                <button className="p-2 bg-gray-800 hover:bg-gray-700 rounded-lg transition-colors">
                  <Download className="w-5 h-5 text-gray-400" />
                </button>
                <button className="p-2 bg-gray-800 hover:bg-gray-700 rounded-lg transition-colors">
                  <Share2 className="w-5 h-5 text-gray-400" />
                </button>
              </div>
            </div>

            {/* AI Enhanced Image or Placeholder */}
            <div className="relative bg-gray-800 rounded-lg overflow-hidden" style={{ minHeight: '400px' }}>
              {isAnalyzing ? (
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="text-center">
                    <Loader2 className="w-16 h-16 text-purple-400 mx-auto mb-4 animate-spin" />
                    <p className="text-purple-400 font-medium">AI Analyzing Plant Image...</p>
                    <p className="text-sm text-gray-500 mt-2">Enhancing image and detecting issues</p>
                  </div>
                </div>
              ) : enhancedImageUrl ? (
                <div className="relative">
                  <img 
                    src={enhancedImageUrl} 
                    alt="AI Enhanced Plant Analysis"
                    className="w-full h-auto rounded-lg"
                    style={{ maxHeight: '600px', objectFit: 'contain' }}
                  />
                  <div className="absolute top-2 left-2 bg-green-500 text-white px-2 py-1 rounded text-xs font-medium">
                    â¨ AI Enhanced
                  </div>
                  {aiAnalysisResults?.imageMetrics && (
                    <div className="absolute bottom-2 right-2 bg-black/70 text-white px-2 py-1 rounded text-xs">
                      {aiAnalysisResults.imageMetrics.width}Ã{aiAnalysisResults.imageMetrics.height} â¢ 
                      {Math.round(aiAnalysisResults.imageMetrics.size / 1024)}KB
                    </div>
                  )}
                </div>
              ) : (
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="text-center">
                    <Scan className="w-16 h-16 text-purple-400 mx-auto mb-4" />
                    <p className="text-gray-400">Use "ð¸ Analyze Plant Health" to get AI-powered analysis</p>
                    <p className="text-sm text-gray-500 mt-2">Enhanced image processing with issue detection</p>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Detected Issues */}
          <div className="bg-gray-900 rounded-xl border border-gray-800 p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-white">Detected Issues & Recommendations</h3>
              {aiAnalysisResults && (
                <div className="flex items-center gap-2 text-sm">
                  <Bot className="w-4 h-4 text-purple-400" />
                  <span className="text-purple-400">AI Analysis</span>
                </div>
              )}
            </div>
            
            {/* Enhanced AI Analysis Results */}
            {aiAnalysisResults && (
              <div className="mb-6">
                <div className="flex items-center justify-between mb-4">
                  <h4 className="text-lg font-semibold text-white">Analysis Summary</h4>
                  <div className="flex items-center gap-2">
                    <div className={`px-2 py-1 rounded text-xs font-medium ${
                      aiAnalysisResults.analysisType === 'enhanced_multi_ai' 
                        ? 'bg-purple-500/20 text-purple-300' 
                        : 'bg-blue-500/20 text-blue-300'
                    }`}>
                      {aiAnalysisResults.analysisType === 'enhanced_multi_ai' ? 'ð§  Enhanced AI' : 'ð Basic Analysis'}
                    </div>
                    <div className="text-sm text-gray-400">
                      {aiAnalysisResults.confidence}% confidence
                    </div>
                  </div>
                </div>
                
                {/* Growth Stage */}
                {aiAnalysisResults.growthStage && aiAnalysisResults.growthStage !== 'unknown' && (
                  <div className="bg-green-900/20 border border-green-700 rounded-lg p-3 mb-4">
                    <div className="flex items-center gap-2 mb-1">
                      <Leaf className="w-4 h-4 text-green-400" />
                      <span className="text-sm font-medium text-green-300">Growth Stage</span>
                    </div>
                    <p className="text-green-100 capitalize">{aiAnalysisResults.growthStage}</p>
                  </div>
                )}

                {/* Nutrient Deficiencies */}
                {aiAnalysisResults.deficiencies?.length > 0 && (
                  <div className="bg-orange-900/20 border border-orange-700 rounded-lg p-3 mb-4">
                    <div className="flex items-center gap-2 mb-2">
                      <Droplets className="w-4 h-4 text-orange-400" />
                      <span className="text-sm font-medium text-orange-300">Nutrient Deficiencies</span>
                    </div>
                    {aiAnalysisResults.deficiencies.map((def: any, idx: number) => (
                      <div key={idx} className="mb-2 last:mb-0">
                        <div className="flex items-center justify-between">
                          <span className="text-orange-100 text-sm font-medium capitalize">
                            {def.type?.replace('_', ' ')}
                          </span>
                          <span className="text-xs text-orange-300">{def.confidence}%</span>
                        </div>
                        <p className="text-xs text-orange-200 mt-1">{def.symptoms}</p>
                      </div>
                    ))}
                  </div>
                )}

                {/* Environmental Stress */}
                {aiAnalysisResults.environmentalStress?.length > 0 && (
                  <div className="bg-red-900/20 border border-red-700 rounded-lg p-3 mb-4">
                    <div className="flex items-center gap-2 mb-2">
                      <Sun className="w-4 h-4 text-red-400" />
                      <span className="text-sm font-medium text-red-300">Environmental Stress</span>
                    </div>
                    {aiAnalysisResults.environmentalStress.map((stress: any, idx: number) => (
                      <div key={idx} className="mb-2 last:mb-0">
                        <div className="flex items-center justify-between">
                          <span className="text-red-100 text-sm font-medium capitalize">
                            {stress.type?.replace('_', ' ')}
                          </span>
                          <span className={`text-xs px-2 py-1 rounded ${
                            stress.severity === 'high' ? 'bg-red-500/20 text-red-300' :
                            stress.severity === 'medium' ? 'bg-yellow-500/20 text-yellow-300' :
                            'bg-blue-500/20 text-blue-300'
                          }`}>
                            {stress.severity}
                          </span>
                        </div>
                        <p className="text-xs text-red-200 mt-1">{stress.description}</p>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )}

            {/* Disease Issues */}
            {aiAnalysisResults?.detectedIssues?.length > 0 ? (
              <div className="space-y-4">
                {aiAnalysisResults.detectedIssues.map((issue: any) => (
                  <div
                    key={issue.id}
                    className={`p-4 rounded-lg border ${
                      issue.severity === 'critical' ? 'bg-red-900/20 border-red-800' :
                      issue.severity === 'high' ? 'bg-orange-900/20 border-orange-800' :
                      issue.severity === 'medium' ? 'bg-yellow-900/20 border-yellow-800' :
                      'bg-blue-900/20 border-blue-800'
                    }`}
                  >
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex items-start gap-3">
                        {issue.type === 'nutrient' && <Droplets className="w-5 h-5 text-yellow-400 mt-0.5" />}
                        {issue.type === 'pest' && <Bug className="w-5 h-5 text-red-400 mt-0.5" />}
                        {issue.type === 'disease' && <AlertTriangle className="w-5 h-5 text-orange-400 mt-0.5" />}
                        {issue.type === 'environmental' && <Sun className="w-5 h-5 text-blue-400 mt-0.5" />}
                        <div>
                          <div className="flex items-center gap-2">
                            <h4 className="font-medium text-white">{issue.name}</h4>
                            <Bot className="w-4 h-4 text-purple-400" title="AI Detected" />
                          </div>
                          <p className="text-sm text-gray-300 mt-1">{issue.description}</p>
                        </div>
                      </div>
                      <div className="text-right">
                        <span className={`text-xs px-2 py-1 rounded-full ${
                          issue.severity === 'critical' ? 'bg-red-500/20 text-red-400' :
                          issue.severity === 'high' ? 'bg-orange-500/20 text-orange-400' :
                          issue.severity === 'medium' ? 'bg-yellow-500/20 text-yellow-400' :
                          'bg-blue-500/20 text-blue-400'
                        }`}>
                          {issue.severity} severity
                        </span>
                        <p className="text-sm text-gray-400 mt-1">
                          {issue.confidence}% confidence
                        </p>
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <p className="text-sm font-medium text-white">AI Recommendations:</p>
                      {issue.recommendations.map((rec: string, idx: number) => (
                        <div key={idx} className="flex items-start gap-2">
                          <CheckCircle className="w-4 h-4 text-green-400 flex-shrink-0 mt-0.5" />
                          <p className="text-sm text-gray-300">{rec}</p>
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
                
                {/* General AI Recommendations */}
                {aiAnalysisResults.recommendations?.length > 0 && (
                  <div className="bg-purple-900/20 border border-purple-700 rounded-lg p-4">
                    <div className="flex items-center gap-2 mb-3">
                      <Sparkles className="w-5 h-5 text-purple-400" />
                      <h4 className="font-medium text-white">General AI Recommendations</h4>
                    </div>
                    <div className="space-y-2">
                      {aiAnalysisResults.recommendations.map((rec: string, idx: number) => (
                        <div key={idx} className="flex items-start gap-2">
                          <CheckCircle className="w-4 h-4 text-purple-400 flex-shrink-0 mt-0.5" />
                          <p className="text-sm text-gray-300">{rec}</p>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            ) : aiAnalysisResults && aiAnalysisResults.detectedIssues?.length === 0 ? (
              <div className="text-center py-8">
                <CheckCircle className="w-16 h-16 text-green-400 mx-auto mb-4" />
                <h4 className="text-lg font-semibold text-white mb-2">Healthy Plant Detected! ð±</h4>
                <p className="text-gray-400 mb-4">AI analysis shows no significant issues</p>
                <div className="space-y-2">
                  {aiAnalysisResults.recommendations?.map((rec: string, idx: number) => (
                    <div key={idx} className="flex items-start gap-2 justify-center">
                      <CheckCircle className="w-4 h-4 text-green-400 flex-shrink-0 mt-0.5" />
                      <p className="text-sm text-gray-300">{rec}</p>
                    </div>
                  ))}
                </div>
              </div>
            ) : (
              <div className="space-y-4">
                {latestAnalysis.issues.map((issue) => (
                  <div
                  key={issue.id}
                  className={`p-4 rounded-lg border ${
                    issue.severity === 'critical' ? 'bg-red-900/20 border-red-800' :
                    issue.severity === 'high' ? 'bg-orange-900/20 border-orange-800' :
                    issue.severity === 'medium' ? 'bg-yellow-900/20 border-yellow-800' :
                    'bg-blue-900/20 border-blue-800'
                  }`}
                >
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex items-start gap-3">
                      {issue.type === 'nutrient' && <Droplets className="w-5 h-5 text-yellow-400 mt-0.5" />}
                      {issue.type === 'pest' && <Bug className="w-5 h-5 text-red-400 mt-0.5" />}
                      {issue.type === 'disease' && <AlertTriangle className="w-5 h-5 text-orange-400 mt-0.5" />}
                      {issue.type === 'environmental' && <Sun className="w-5 h-5 text-blue-400 mt-0.5" />}
                      <div>
                        <h4 className="font-medium text-white">{issue.name}</h4>
                        <p className="text-sm text-gray-300 mt-1">{issue.description}</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <span className={`text-xs px-2 py-1 rounded-full ${
                        issue.severity === 'critical' ? 'bg-red-500/20 text-red-400' :
                        issue.severity === 'high' ? 'bg-orange-500/20 text-orange-400' :
                        issue.severity === 'medium' ? 'bg-yellow-500/20 text-yellow-400' :
                        'bg-blue-500/20 text-blue-400'
                      }`}>
                        {issue.severity} severity
                      </span>
                      <p className="text-sm text-gray-400 mt-1">
                        {issue.confidence}% confidence
                      </p>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <p className="text-sm font-medium text-white">Recommendations:</p>
                    {issue.recommendations.map((rec, idx) => (
                      <div key={idx} className="flex items-start gap-2">
                        <CheckCircle className="w-4 h-4 text-green-400 flex-shrink-0 mt-0.5" />
                        <p className="text-sm text-gray-300">{rec}</p>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          )}

          {/* Plant Measurements */}
          <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
            <div className="bg-gray-900 rounded-xl border border-gray-800 p-4">
              <div className="flex items-center gap-2 mb-2">
                <Ruler className="w-4 h-4 text-gray-400" />
                <span className="text-sm text-gray-400">Height</span>
              </div>
              <p className="text-xl font-bold text-white">{latestAnalysis.measurements.height} cm</p>
            </div>
            <div className="bg-gray-900 rounded-xl border border-gray-800 p-4">
              <div className="flex items-center gap-2 mb-2">
                <Maximize2 className="w-4 h-4 text-gray-400" />
                <span className="text-sm text-gray-400">Canopy Width</span>
              </div>
              <p className="text-xl font-bold text-white">{latestAnalysis.measurements.canopyWidth} cm</p>
            </div>
            <div className="bg-gray-900 rounded-xl border border-gray-800 p-4">
              <div className="flex items-center gap-2 mb-2">
                <Leaf className="w-4 h-4 text-gray-400" />
                <span className="text-sm text-gray-400">Leaf Area</span>
              </div>
              <p className="text-xl font-bold text-white">{latestAnalysis.measurements.leafArea} cmÂ²</p>
            </div>
            <div className="bg-gray-900 rounded-xl border border-gray-800 p-4">
              <div className="flex items-center gap-2 mb-2">
                <Activity className="w-4 h-4 text-gray-400" />
                <span className="text-sm text-gray-400">Chlorophyll</span>
              </div>
              <p className="text-xl font-bold text-white">{latestAnalysis.measurements.chlorophyllContent}</p>
            </div>
            <div className="bg-gray-900 rounded-xl border border-gray-800 p-4">
              <div className="flex items-center gap-2 mb-2">
                <AlertTriangle className="w-4 h-4 text-gray-400" />
                <span className="text-sm text-gray-400">Stress Index</span>
              </div>
              <p className="text-xl font-bold text-white">{latestAnalysis.measurements.stressIndex}</p>
            </div>
          </div>
        </>
      )}

      {viewMode === 'history' && (
        <div className="bg-gray-900 rounded-xl border border-gray-800 p-6">
          <h3 className="text-lg font-semibold text-white mb-4">Analysis History</h3>
          <div className="space-y-3">
            {[1, 2, 3, 4, 5].map((idx) => (
              <div key={idx} className="flex items-center justify-between p-4 bg-gray-800 rounded-lg hover:bg-gray-750 transition-colors cursor-pointer">
                <div className="flex items-center gap-4">
                  <div className="w-16 h-16 bg-gray-700 rounded-lg flex items-center justify-center">
                    <Camera className="w-8 h-8 text-gray-500" />
                  </div>
                  <div>
                    <h4 className="font-medium text-white">Zone Analysis #{idx}</h4>
                    <p className="text-sm text-gray-400">{new Date(Date.now() - idx * 86400000).toLocaleDateString()}</p>
                  </div>
                </div>
                <div className="text-right">
                  <p className="text-lg font-bold text-white">{95 - idx * 2}%</p>
                  <p className="text-sm text-gray-400">Health Score</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Time-lapse Modal */}
      {showTimelapseModal && timelapseUrl && (
        <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div className="bg-gray-900 border border-gray-700 rounded-xl shadow-2xl w-full max-w-4xl">
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-xl font-semibold text-white">Plant Growth Time-lapse</h3>
                <button
                  onClick={() => setShowTimelapseModal(false)}
                  className="p-2 hover:bg-gray-800 rounded-lg transition-colors"
                >
                  <X className="w-5 h-5 text-gray-400" />
                </button>
              </div>
              
              <div className="mb-4">
                <video
                  src={timelapseUrl}
                  controls
                  autoPlay
                  loop
                  className="w-full max-h-96 rounded-lg bg-black"
                >
                  Your browser does not support the video tag.
                </video>
              </div>
              
              <div className="flex items-center justify-between">
                <div className="text-sm text-gray-400">
                  Generated from {timelapseImages.length} images â¢ Zone: {selectedZone}
                </div>
                <div className="flex gap-2">
                  <a
                    href={timelapseUrl}
                    download={`plant_growth_timelapse_${selectedZone}.mp4`}
                    className="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors flex items-center gap-2"
                  >
                    <Download className="w-4 h-4" />
                    Download
                  </a>
                  <button
                    onClick={() => setShowTimelapseModal(false)}
                    className="px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors"
                  >
                    Close
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

