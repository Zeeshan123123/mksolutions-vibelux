// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  name             String?
  role             UserRole @default(USER)
  settings         Json? // User preferences
  subscriptionTier String?  @default("FREE")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Authentication
  clerkId String? @unique

  // Stripe subscription fields
  stripeCustomerId      String?
  stripeSubscriptionId  String?
  subscriptionStatus    String?
  subscriptionPeriodEnd DateTime?
  subscriptionCancelAt  DateTime?

  projects                 Project[]
  savedDesigns             SavedDesign[]
  experiments              Experiment[]
  spectralLearningProfiles SpectralLearningProfile[]
  facilities               FacilityUser[]
  investments              Investment[]
  notifications            Notification[]
  scoutingRecords          ScoutingRecord[]
  tasks                    Task[]
  sessions                 UserSession[]
  mobileSessions           MobileSession[]
  apiKeys                  ApiKey[]
  auditLogs                AuditLog[]
  securityEvents           SecurityEvent[]
  featureOverrides         UserFeatureOverride[]
  updateStatuses           UserUpdateStatus[]
  priceProtections         PriceProtection[]
  ownedFacilities          Facility[]                @relation("FacilityOwner")
  serviceRequests          ServiceRequest[]
  serviceReviews           ServiceReview[]
  equipmentRequests        EquipmentRequest[]
  equipmentOffers          EquipmentOffer[]
  equipmentQuestions       EquipmentQuestion[]

  // SOP and workforce relations  
  sopDocuments      SOPDocument[]     @relation("SOPAuthor")
  sopCheckIns       SOPCheckIn[]
  documentCheckouts DocumentCheckout[]
  employees         Employee[]
  projectUpdates    ProjectUpdate[]

  // Expert consultation relationships
  expertProfile           Expert?
  consultationsAsClient   Consultation[]           @relation("ClientConsultations")
  consultationMessages    ConsultationMessage[]
  expertReviews           ExpertReview[]
  consultationAttachments ConsultationAttachment[]
  dataImports             DataImport[]
  mlDatasets              MLDataset[]
  mlModels                MLModel[]

  // Affiliate/Referral relationships
  affiliate            Affiliate?
  referredByAffiliate  AffiliateReferral[]   @relation("ReferredUsers")
  affiliateCommissions AffiliateCommission[]
  termsViolations      TermsViolation[]

  // Financial automation relationships
  revenueSharingAgreements RevenueSharingAgreement[]
  invoices                 Invoice[]
  payments                 Payment[]
  paymentMethods           PaymentMethod[]
  utilityConnections       UtilityConnection[]
  collectionActivities     CollectionActivity[]
  collectionCases          CollectionCase[]

  // Marketplace relationships
  marketplaceVendor   MarketplaceVendor?
  marketplaceProducts MarketplaceProduct[]
  marketplaceOrders   MarketplaceOrder[]    @relation("OrderBuyer")
  vendorOrders        MarketplaceOrder[]    @relation("OrderVendor")
  cartItems           MarketplaceCartItem[]
  geneticsListings    GeneticsListing[]
  rfqs                RequestForQuote[]

  // Market data & benchmarking relationships
  marketDataReports      MarketData[]
  benchmarkSubscriptions BenchmarkSubscription[]
  quotes                 RFQQuote[]

  utilityBills       UtilityBillData[]
  clientBaseline     ClientBaseline?
  vibeluxInvoices    VibeLuxInvoice[]
  financialDocuments FinancialDocument[]
  lightingSchedules  LightingSchedule[]
  
  // Chat system relationships
  chatChannels       ChatChannel[]
  chatMessages       ChatMessage[]
  messageReactions   MessageReaction[]
  facilityMemberships FacilityMember[]
  cadImports         CadImport[]

  // Recipe Marketplace relationships
  createdRecipes   CultivationRecipe[] @relation("RecipeCreator")
  recipePurchases  RecipePurchase[]    @relation("RecipePurchases")
  recipeExecutions RecipeExecution[]   @relation("RecipeExecutions")
  recipeReviews    RecipeReview[]      @relation("RecipeReviews")
  recipeFavorites  RecipeFavorite[]    @relation("RecipeFavorites")

  // Scheduled actions (for subscription management, etc.)
  scheduledActions ScheduledAction[]

  // Usage tracking for billing
  usageRecords UsageRecord[]

  // GMP Document Management relationships
  authoredGMPDocuments GMPDocument[]         @relation("GMPDocumentAuthor")
  reviewedGMPDocuments GMPDocument[]         @relation("GMPDocumentReviewer")
  approvedGMPDocuments GMPDocument[]         @relation("GMPDocumentApprover")
  electronicSignatures ElectronicSignature[] @relation("ElectronicSignature")
  documentAttachments  DocumentAttachment[]  @relation("DocumentAttachment")
  auditTrailEntries    AuditTrailEntry[]     @relation("AuditTrailEntry")

  // Batch Record relationships
  operatedBatchRecords BatchRecord[] @relation("BatchRecordOperator")
  operatedProcessSteps ProcessStep[] @relation("ProcessStepOperator")
  testResults          TestResult[]  @relation("TestResultTester")

  // Deviation Management relationships
  reportedDeviations Deviation[] @relation("DeviationReporter")
  assignedDeviations Deviation[] @relation("DeviationAssignee")

  // Training Record relationships
  trainingRecords     TrainingRecord[] @relation("TrainingRecordUser")

  // Pesticide application operator back-relation
  pesticideApplicationsOperated PesticideApplication[] @relation("PesticideOperator")
  instructedTrainings TrainingRecord[] @relation("TrainingRecordInstructor")

  // Greenhouse Design relationships
  greenhouseDesigns   GreenhouseDesign[]

  // Alert Detection relationships
  acknowledgedAlerts  AlertLog[] @relation("AlertAcknowledger")
  resolvedAlerts      AlertLog[] @relation("AlertResolver")

  // Indexes for common query patterns
  @@index([email]) // Frequent lookups by email
  @@index([clerkId]) // Authentication lookups
  @@index([stripeCustomerId]) // Stripe webhook processing
  @@index([stripeSubscriptionId]) // Subscription status checks
  @@index([subscriptionStatus, subscriptionPeriodEnd]) // Finding active/expiring subscriptions
  @@index([role]) // Admin and role-based queries
  @@index([createdAt]) // User acquisition reports
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  spaces       Space[]
  experiments  Experiment[]
  savedDesigns SavedDesign[]
  
  // Project management relations
  projectTasks     ProjectTask[]
  stakeholders     ProjectStakeholder[]
  projectUpdates   ProjectUpdate[]

  // Indexes for common query patterns
  @@index([ownerId]) // User's projects listing
  @@index([ownerId, createdAt]) // User's projects sorted by date
  @@index([name]) // Project search by name
}

model Space {
  id        String    @id @default(cuid())
  name      String
  type      SpaceType
  area      Float
  height    Float
  projectId String
  project   Project   @relation(fields: [projectId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  fixtures     Fixture[]
  spectralData SpectralData[]
}

model Fixture {
  id           String   @id @default(cuid())
  model        String
  manufacturer String
  power        Float
  spaceId      String
  space        Space    @relation(fields: [spaceId], references: [id])
  position     Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  spectralOutputs SpectralOutput[]
}

model Experiment {
  id          String           @id @default(cuid())
  name        String
  description String?
  projectId   String
  project     Project          @relation(fields: [projectId], references: [id])
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  startDate   DateTime
  endDate     DateTime?
  status      ExperimentStatus @default(ACTIVE)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  measurements Measurement[]

  // Indexes for common query patterns
  @@index([userId, status]) // User's active experiments
  @@index([projectId]) // Experiments by project
  @@index([status, startDate]) // Active experiments timeline
}

model Measurement {
  id           String     @id @default(cuid())
  experimentId String
  experiment   Experiment @relation(fields: [experimentId], references: [id])
  timestamp    DateTime
  metricType   MetricType
  value        Float
  unit         String
  notes        String?
  createdAt    DateTime   @default(now())

  @@index([experimentId, timestamp])
}

// Historical data for analysis
model HistoricalData {
  id        String   @id @default(cuid())
  source    String
  dataType  String
  timestamp DateTime
  data      Json
  processed Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([source, timestamp])
}

// Advanced ML Models
model YieldTrainingData {
  id           String   @id @default(cuid())
  temperature  Float
  humidity     Float
  ppfd         Float
  co2          Float
  vpd          Float
  ec           Float
  ph           Float
  dli          Float
  growthStage  String
  actualYield  Float
  qualityScore Float
  createdAt    DateTime @default(now())

  @@index([createdAt])
}

model YieldPredictionModel {
  id        String   @id @default(cuid())
  version   String
  modelData Json // Serialized TensorFlow model
  metrics   Json // Model performance metrics
  active    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([version])
}

// Performance tracking
model PerformanceRecord {
  id         String   @id @default(cuid())
  facilityId String
  date       DateTime
  metrics    Json
  createdAt  DateTime @default(now())

  @@index([facilityId, date])
}

// New Spectral Learning Models
model SpectralData {
  id        String   @id @default(cuid())
  spaceId   String
  space     Space    @relation(fields: [spaceId], references: [id])
  timestamp DateTime

  // Environment type
  environmentType          EnvironmentType
  naturalLightContribution Float // 0-100% for greenhouses

  // Spectrum measurements (μmol/m²/s for each band)
  uvb280_315    Float? // UV-B (critical for THC)
  uva315_340    Float? // UV-A lower
  uva340_380    Float? // UV-A mid
  uv380_390     Float? // UV-A upper (cannabinoid trigger)
  uv390_400     Float? // UV-A/Violet boundary
  violet400_420 Float? // Deep violet
  violet420_440 Float? // Violet
  blue440_460   Float? // Royal blue
  blue460_480   Float? // Blue
  blue480_500   Float? // Light blue
  cyan500_520   Float? // Cyan
  green520_540  Float? // Green
  green540_560  Float? // Yellow-green
  yellow560_580 Float? // Yellow
  amber580_600  Float? // Amber
  orange600_620 Float? // Orange
  red620_640    Float? // Red
  red640_660    Float? // Deep red
  red660_680    Float? // Hyper red
  farRed680_700 Float? // Near far-red
  farRed700_730 Float? // Far-red
  farRed730_780 Float? // Extended far-red

  // Total PPFD and ratios
  totalPPFD    Float
  rbrRatio     Float? // Red:Blue ratio
  rfrRatio     Float? // Red:Far-red ratio
  bluePercent  Float?
  greenPercent Float?
  redPercent   Float?

  // Associated fixture settings
  fixtureSettings Json? // Channel intensities, schedules, etc.

  createdAt DateTime @default(now())

  spectralCorrelations SpectralCorrelation[]

  @@index([spaceId, timestamp])
  @@index([environmentType, timestamp])
}

model PlantResponse {
  id             String   @id @default(cuid())
  spectralDataId String?
  timestamp      DateTime

  // Growth metrics
  heightGrowth    Float? // mm/day
  leafAreaGrowth  Float? // cm²/day
  stemDiameter    Float? // mm
  internodeLength Float? // mm
  leafCount       Int?

  // Physiological metrics
  chlorophyllContent  Float? // SPAD units
  photosynthesisRate  Float? // μmol CO₂/m²/s
  transpiration       Float? // mmol H₂O/m²/s
  stomatalConductance Float? // mmol/m²/s
  waterUseEfficiency  Float? // μmol CO₂/mmol H₂O

  // Morphological traits
  compactness    Float? // 0-100 scale
  leafAngle      Float? // degrees
  branchingIndex Float? // branches per node
  flowerCount    Int?
  fruitCount     Int?

  // Quality metrics
  biomassAccumulation Float? // g/day
  dryWeight           Float? // g
  yieldWeight         Float? // g
  qualityScore        Float? // 0-100

  // Cannabis-specific compounds
  thcContent        Float? // % by dry weight
  cbdContent        Float? // % by dry weight
  cbgContent        Float? // % by dry weight
  cbcContent        Float? // % by dry weight
  totalCannabinoids Float? // % by dry weight

  // Terpene measurements (% by dry weight)
  myrcene       Float?
  limonene      Float?
  caryophyllene Float?
  pinene        Float?
  linalool      Float?
  humulene      Float?
  terpinolene   Float?
  ocimene       Float?
  totalTerpenes Float?

  // Terpene profile as JSON for extended compounds
  terpeneProfile Json? // { "terpene_name": percentage, ... }

  // Flavonoid content
  flavonoidContent Float? // mg/g
  anthocyanins     Float? // mg/g (purple coloration)

  // Plant sensor data (if available)
  sapFlowRate        Float? // g/h
  stemWaterPotential Float? // MPa
  leafTemperature    Float? // °C
  electricalSignals  Json? // Raw signal data

  // Metadata
  plantId      String?
  cultivar     String?
  growthStage  GrowthStage
  daysFromSeed Int?

  createdAt DateTime @default(now())

  spectralCorrelations SpectralCorrelation[]

  @@index([timestamp])
  @@index([plantId, timestamp])
}

model SpectralCorrelation {
  id              String        @id @default(cuid())
  spectralDataId  String
  spectralData    SpectralData  @relation(fields: [spectralDataId], references: [id])
  plantResponseId String
  plantResponse   PlantResponse @relation(fields: [plantResponseId], references: [id])

  // Correlation strengths (-1 to 1)
  uvCorrelation     Float?
  blueCorrelation   Float?
  greenCorrelation  Float?
  redCorrelation    Float?
  farRedCorrelation Float?

  // Interaction effects
  rbInteraction Float? // Red-Blue interaction
  rfInteraction Float? // Red-FarRed interaction

  // Statistical metrics
  rSquared           Float?
  pValue             Float?
  confidenceInterval Json?

  // Environmental context
  temperature Float
  humidity    Float
  co2         Float
  vpd         Float

  createdAt DateTime @default(now())

  @@index([spectralDataId, plantResponseId])
}

model SpectralLearningProfile {
  id          String  @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User    @relation(fields: [userId], references: [id])

  // Target crop and growth stage
  cropType    String
  cultivar    String?
  targetStage GrowthStage?

  // Optimal spectrum discovered
  optimalSpectrum Json // Channel intensities and ratios
  confidenceScore Float // 0-100

  // Performance metrics
  yieldImprovement   Float? // % improvement
  qualityImprovement Float? // % improvement
  energySavings      Float? // % reduction

  // Learning metadata
  dataPoints  Int // Number of data points used
  lastUpdated DateTime
  version     Int      @default(1)

  createdAt DateTime @default(now())

  regressionModels SpectralRegressionModel[]

  @@index([cropType, cultivar])
}

model SpectralRegressionModel {
  id        String                  @id @default(cuid())
  profileId String
  profile   SpectralLearningProfile @relation(fields: [profileId], references: [id])

  modelType    RegressionType
  targetMetric String // What we're predicting
  features     Json // Selected features
  coefficients Json // Model coefficients

  // Model performance
  r2Score              Float
  rmse                 Float
  mape                 Float? // Mean absolute percentage error
  crossValidationScore Float?

  // Feature importance
  featureImportance Json

  // Model metadata
  trainingDataSize Int
  testDataSize     Int
  lastTrained      DateTime
  isActive         Boolean  @default(true)

  createdAt DateTime @default(now())

  @@index([profileId, targetMetric])
}

model SpectralOutput {
  id        String   @id @default(cuid())
  fixtureId String
  fixture   Fixture  @relation(fields: [fixtureId], references: [id])
  timestamp DateTime

  // Spectrum output settings
  channelSettings Json // { "blue": 80, "red": 100, ... }
  totalPower      Float // Watts
  efficacy        Float // μmol/J

  createdAt DateTime @default(now())

  @@index([fixtureId, timestamp])
}

// Cannabis-specific cultivation profiles
model CannabisStrainProfile {
  id         String     @id @default(cuid())
  strainName String
  strainType StrainType // INDICA, SATIVA, HYBRID

  // Target compound profiles
  targetTHC      Float // Target THC %
  targetCBD      Float // Target CBD %
  targetTerpenes Json // { "myrcene": 1.2, "limonene": 0.8, ... }

  // Optimal spectrum discovered through learning
  vegetativeSpectrum Json // Optimal spectrum for veg stage
  floweringSpectrum  Json // Optimal spectrum for flower stage
  uvProtocol         Json // UV exposure timing and intensity

  // Environmental preferences
  optimalVPD  Json // { "veg": 0.8-1.0, "flower": 1.0-1.2 }
  optimalTemp Json // { "day": 25, "night": 20 }

  // Performance metrics
  avgYield     Float? // g/m²
  avgTHC       Float? // Achieved THC %
  avgTerpenes  Float? // Total terpene %
  qualityScore Float? // 0-100

  dataPoints  Int      @default(0)
  lastUpdated DateTime @updatedAt
  createdAt   DateTime @default(now())

  cannabisExperiments CannabisExperiment[]

  @@index([strainName])
}

model CannabisExperiment {
  id              String                @id @default(cuid())
  strainProfileId String
  strainProfile   CannabisStrainProfile @relation(fields: [strainProfileId], references: [id])

  // Spectrum treatment
  uvbDose        Float // μmol/m²/day
  uva380_390Dose Float // μmol/m²/day
  uvTiming       String // "continuous", "end-of-day", "pulsed"
  uvDuration     Int // minutes per day

  // Results
  finalTHC       Float?
  finalCBD       Float?
  terpeneProfile Json?
  yieldPerPlant  Float?

  // Growth observations
  trichomeDensity  Float? // trichomes/mm²
  trichomeMaturity Json? // { "clear": 10, "cloudy": 70, "amber": 20 }

  startDate   DateTime
  harvestDate DateTime?

  createdAt DateTime @default(now())

  @@index([strainProfileId, finalTHC])
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
  RESEARCHER
}

enum SpaceType {
  GREENHOUSE
  INDOOR
  VERTICAL_FARM
  GROWTH_CHAMBER
}

enum ExperimentStatus {
  PLANNED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum MetricType {
  HEIGHT
  LEAF_AREA
  BIOMASS
  YIELD
  QUALITY
  CHLOROPHYLL
  PHOTOSYNTHESIS
}

enum EnvironmentType {
  INDOOR // 100% artificial light
  GREENHOUSE // Mixed natural + artificial
  OUTDOOR // Natural light only (control)
}

enum GrowthStage {
  GERMINATION
  SEEDLING
  VEGETATIVE
  FLOWERING
  FRUITING
  HARVEST
}

enum RegressionType {
  LINEAR
  POLYNOMIAL
  RIDGE
  LASSO
  ELASTIC_NET
  RANDOM_FOREST
  GRADIENT_BOOST
  NEURAL_NETWORK
}

enum StrainType {
  INDICA
  SATIVA
  HYBRID
  HYBRID_INDICA
  HYBRID_SATIVA
  HYBRID_BALANCED
  RUDERALIS
  HIGH_CBD
  CBD_DOMINANT
  HIGH_THC
  BALANCED
  AUTOFLOWER
  LANDRACE
  UNKNOWN
}

// Facility Management Models
model Facility {
  id          String       @id @default(cuid())
  name        String
  description String?
  type        FacilityType
  address     String?
  city        String?
  state       String?
  country     String?
  zipCode     String?
  size        Float? // square feet

  // Owner relation
  ownerId String?
  owner   User?   @relation("FacilityOwner", fields: [ownerId], references: [id])

  // Settings
  settings Json? // General facility settings

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users             FacilityUser[]
  investments       InvestmentOpportunity[]
  projects          FacilityProject[]
  invites           FacilityInvite[]
  sensorReadings    SensorReading[]
  harvestBatches    HarvestBatch[]
  waterUsage        WaterUsage[]
  waterAlerts       WaterAlert[]
  scoutingRecords   ScoutingRecord[]
  equipment         Equipment[]
  serviceRequests   ServiceRequest[]
  equipmentRequests EquipmentRequest[]

  // Financial automation relationships
  revenueSharingAgreements RevenueSharingAgreement[]
  weatherNormalizations    WeatherNormalization[]
  thirdPartyValidations    ThirdPartyValidation[]
  facilityTrustScore       FacilityTrustScore?

  // Market data & benchmarking relationships
  marketData        MarketData[]
  benchmarkReports  BenchmarkReport[]
  dataContributions DataContribution[]
  apiKeys           ApiKey[]
  dataImports       DataImport[]
  
  // Operational integrations
  facilityWeather   FacilityWeather?
  erpConnections    ERPConnection[]
  crops             Crop[]

  // Pest analysis relationships
  pestAnalyses PestAnalysis[]

  // Usage tracking for billing
  usageRecords UsageRecord[]

  // GMP Compliance relationships
  gmpDocuments    GMPDocument[]
  batchRecords    BatchRecord[]
  deviations      Deviation[]
  trainingRecords TrainingRecord[]

  // Greenhouse Design relationships
  greenhouseDesigns GreenhouseDesign[]
  
  // Alert Detection relationships
  alertConfigurations AlertConfiguration[]
  alertLogs          AlertLog[]
  
  // Chat system relationships
  chatChannels    ChatChannel[]
  facilityMembers FacilityMember[]
  
  // Energy monitoring relationships
  energyReadings  EnergyReading[]
  energyBaselines EnergyBaseline[]
  
  // HMI relationships
  hmiZones                 HMIZone[]
  hmiAutomationRules       HMIAutomationRule[]
  hmiLayouts               HMILayout[]
  hmiAlarmAcknowledgements HMIAlarmAcknowledgement[]
  
  // SOP and workforce relationships
  sopDocuments     SOPDocument[]
  sopCheckIns      SOPCheckIn[]
  employees        Employee[]
  workTasks        WorkTask[]

  // Visual Ops & Reporting
  photoReports    PhotoReport[]
  qualityReports  QualityReport[]

  // Legacy production batches
  productionBatchesLegacy ProductionBatchLegacy[]

  // Compliance back-relations
  pesticideInventoryItems PesticideInventoryItem[]
  pesticideApplications   PesticideApplication[]
  complianceBatches       ComplianceBatch[]
  haccpPlans              HACCPPlan[]
  ccpRecords              CCPRecord[]
  complianceCertificates  ComplianceCertificate[]

  // Finance back-relations
  accounts         Account[]
  journalEntries   JournalEntry[]
  billingInvoices  BillingInvoice[]
  billingPayments  BillingPayment[]
  budgets          Budget[]

  @@index([name])
  @@index([ownerId]) // Facilities owned by user
  @@index([type]) // Facilities by type
  @@index([state, city]) // Geographic queries
  @@index([createdAt]) // New facility tracking
}

model FacilityUser {
  id          String       @id @default(cuid())
  facilityId  String
  facility    Facility     @relation(fields: [facilityId], references: [id])
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  role        FacilityRole
  permissions Json? // Specific permissions

  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([facilityId, userId])
  @@index([userId])
}

model FacilityProject {
  id         String   @id @default(cuid())
  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id])
  projectId  String   @unique

  createdAt DateTime @default(now())
}

model FacilityInvite {
  id         String   @id @default(cuid())
  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id])

  email String
  role  FacilityRole
  token String       @unique

  invitedBy String
  status    InviteStatus @default(PENDING)

  createdAt  DateTime  @default(now())
  expiresAt  DateTime
  acceptedAt DateTime?

  @@index([email])
  @@index([token])
}

// Scouting Models
model ScoutingRecord {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  facilityId String?
  facility   Facility? @relation(fields: [facilityId], references: [id])

  timestamp DateTime
  latitude  Float
  longitude Float
  zone      String?
  block     String?

  issueType     String // pest, disease, deficiency, general
  severity      String // low, medium, high, critical
  issue         String
  notes         String?
  photos        String[] // Array of photo URLs
  environmental Json? // temp, humidity, etc.

  actionRequired Boolean @default(false)
  assignedTo     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([facilityId])
  @@index([timestamp])
  @@index([issueType])
  @@index([severity])
}

model Task {
  id          String  @id @default(cuid())
  title       String
  description String?
  priority    String // low, medium, high
  status      String // pending, in-progress, completed, overdue
  taskType    String // watering, pruning, harvest, ipm, etc.

  assignedTo   String
  assignedUser User   @relation(fields: [assignedTo], references: [id])

  dueDate     DateTime?
  completedAt DateTime?

  facilityId String
  createdBy  String
  metadata   Json? // Additional task-specific data

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([assignedTo])
  @@index([status])
  @@index([dueDate])
  @@index([facilityId])
}

// Harvest & Yield Models
model HarvestBatch {
  id          String @id @default(cuid())
  batchNumber String @unique
  crop        String
  variety     String
  zone        String
  block       String

  plantedDate DateTime
  harvestDate DateTime
  status      String // planned, in-progress, completed, quality-check, shipped

  estimatedYield Float
  actualYield    Float  @default(0)
  qualityGrade   String @default("A") // A, B, C, reject

  equipment String[] // Array of equipment IDs
  notes     String?
  photos    String[] // Array of photo URLs

  weight    Json // { gross, net, tare }
  packaging Json // { type, count, size }
  tracking  Json // { startTime, endTime, breaks, productivity }

  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id])
  createdBy  String

  crew      HarvestCrew[]
  yieldData YieldData[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([facilityId])
  @@index([status])
  @@index([harvestDate])
}

model HarvestCrew {
  id      String       @id @default(cuid())
  batchId String
  batch   HarvestBatch @relation(fields: [batchId], references: [id])

  name         String
  role         String // picker, packer, supervisor, quality-checker
  hourlyRate   Float
  hoursWorked  Float  @default(0)
  productivity Float  @default(0) // kg/hour
  qualityScore Float  @default(0) // percentage

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([batchId])
}

model YieldData {
  id      String       @id @default(cuid())
  batchId String
  batch   HarvestBatch @relation(fields: [batchId], references: [id])

  weight     Float
  notes      String?
  recordedAt DateTime @default(now())
  recordedBy String

  @@index([batchId])
  @@index([recordedAt])
}

// Investment Models
model InvestmentOpportunity {
  id         String   @id @default(cuid())
  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id])

  title       String
  description String
  type        InvestmentType
  status      InvestmentStatus @default(ACTIVE)

  // Financial details
  minInvestment  Float
  maxInvestment  Float
  targetAmount   Float
  currentAmount  Float @default(0)
  expectedReturn Float // percentage

  // Terms
  duration        Int // months
  paymentSchedule PaymentSchedule

  // Documents
  documents Json? // Array of document URLs/references

  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  investments Investment[]

  @@index([facilityId, status])
}

model Investment {
  id            String                @id @default(cuid())
  opportunityId String
  opportunity   InvestmentOpportunity @relation(fields: [opportunityId], references: [id])
  investorId    String
  investor      User                  @relation(fields: [investorId], references: [id])

  amount Float
  status InvestmentTransactionStatus @default(PENDING)

  // Payment details
  paymentMethod String?
  transactionId String?

  // Returns tracking
  totalReturns Float     @default(0)
  lastPayout   DateTime?

  notes String?

  investedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  payouts InvestmentPayout[]

  @@index([investorId])
  @@index([opportunityId])
}

model InvestmentPayout {
  id           String     @id @default(cuid())
  investmentId String
  investment   Investment @relation(fields: [investmentId], references: [id])

  amount Float
  type   PayoutType
  status PayoutStatus @default(PENDING)

  scheduledDate DateTime
  paidDate      DateTime?
  transactionId String?

  createdAt DateTime @default(now())

  @@index([investmentId, scheduledDate])
}

// Affiliate Models
model Affiliate {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  code   String          @unique
  tier   AffiliateTier   @default(BRONZE)
  status AffiliateStatus @default(ACTIVE)

  // Enhanced commission rates
  baseCommission     Float   @default(25) // percentage
  bonusCommission    Float   @default(0) // additional percentage
  lifetimeCommission Boolean @default(true) // Enable lifetime commissions
  customRates        Json? // Custom commission schedule

  // Performance incentives
  signupBonusEarned  Float @default(0) // Total signup bonuses earned
  tierBonusEarned    Float @default(0) // Total tier bonuses earned
  monthlyBonusEarned Float @default(0) // Total monthly contest bonuses

  // Special privileges
  isVip                Boolean @default(false)
  hasRevShareAccess    Boolean @default(false)
  hasCoMarketingAccess Boolean @default(false)
  hasLeadAccess        Boolean @default(false)

  // Performance metrics
  totalReferrals  Int       @default(0)
  activeReferrals Int       @default(0)
  totalRevenue    Float     @default(0)
  totalCommission Float     @default(0)
  totalClicks     Int       @default(0)
  lastClickAt     DateTime?

  // Payment info
  paymentMethod  String?
  paymentDetails Json?
  lastPayout     DateTime?

  // Stripe Connect fields for automated payouts
  stripeAccountId          String?
  stripeAccountStatus      String? // 'pending', 'active', 'disconnected'
  stripeVerificationStatus String? // 'verified', 'needs_info', 'rejected'
  stripeVerificationFields Json?   // Fields needed for verification
  
  // Payout settings
  payoutSchedule           String? @default("monthly") // 'weekly', 'monthly', 'manual'
  minimumPayout           Float   @default(50) // Minimum payout amount

  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  referrals   AffiliateReferral[]
  payouts     AffiliatePayout[]
  clicks      AffiliateClick[]
  bonuses     AffiliateBonus[]
  performance AffiliatePerformance[]
  links       AffiliateLink[]

  // Financial automation relationships
  revenueSharingAgreements RevenueSharingAgreement[]
  commissions              AffiliateCommission[]

  @@index([code])
  @@index([status])
  @@index([tier])
  @@index([stripeAccountId])
}

model AffiliateLink {
  id            String   @id @default(cuid())
  affiliateId   String
  affiliate     Affiliate @relation(fields: [affiliateId], references: [id])
  originalUrl   String
  shortCode     String   @unique
  customAlias   String?
  
  // UTM parameters
  utmCampaign   String?
  utmSource     String?
  utmMedium     String?
  utmContent    String?
  
  // Link settings
  isActive      Boolean  @default(true)
  expiresAt     DateTime?
  
  // Performance metrics
  clicks        Int      @default(0)
  uniqueClicks  Int      @default(0)
  conversions   Int      @default(0)
  revenue       Float    @default(0)
  
  // Metadata
  metadata      Json?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([affiliateId])
  @@index([shortCode])
  @@index([isActive])
}

model AffiliateReferral {
  id          String    @id @default(cuid())
  affiliateId String
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])

  referredEmail  String
  referredUserId String?
  referredUser   User?          @relation("ReferredUsers", fields: [referredUserId], references: [id])
  status         ReferralStatus @default(PENDING)

  // Conversion tracking
  signedUpAt      DateTime?
  firstPurchaseAt DateTime?
  totalPurchases  Float     @default(0)

  // Commission tracking
  totalCommission Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([affiliateId, status])
  @@index([referredEmail])
}

model AffiliatePayout {
  id          String    @id @default(cuid())
  affiliateId String
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])

  amount Float
  status PayoutStatus @default(PENDING)

  period        String // e.g., "2024-01"
  transactionId String?

  createdAt DateTime  @default(now())
  paidAt    DateTime?

  @@index([affiliateId, period])
}

model AffiliateBonus {
  id          String    @id @default(cuid())
  affiliateId String
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])

  type        AffiliateBonusType
  amount      Float
  description String
  status      BonusStatus        @default(PENDING)

  // Trigger conditions
  triggerData Json? // Store conditions that triggered the bonus

  // Payment tracking
  paidAt   DateTime?
  payoutId String?

  createdAt DateTime @default(now())

  @@index([affiliateId, type])
  @@index([status])
}

model AffiliatePerformance {
  id          String    @id @default(cuid())
  affiliateId String
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])

  // Time period
  month Int // 1-12
  year  Int

  // Performance metrics
  clicks         Int   @default(0)
  conversions    Int   @default(0)
  revenue        Float @default(0)
  commissions    Float @default(0)
  conversionRate Float @default(0)

  // Rankings
  clickRank      Int?
  conversionRank Int?
  revenueRank    Int?

  // Bonuses earned this period
  bonusesEarned Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([affiliateId, month, year])
  @@index([year, month])
  @@index([revenueRank])
}

model AffiliateLeaderboard {
  id String @id @default(cuid())

  // Period
  month Int
  year  Int
  type  LeaderboardType

  // Rankings
  rankings Json // Array of affiliate rankings

  // Prizes
  totalPrizes Float   @default(0)
  distributed Boolean @default(false)

  createdAt DateTime @default(now())

  @@unique([month, year, type])
  @@index([year, month])
}

model AffiliateSalesAsset {
  id String @id @default(cuid())

  name        String
  type        SalesAssetType
  category    String
  description String?

  // File info
  fileUrl  String?
  fileSize Int?
  fileType String?

  // Access control
  tierRequired AffiliateTier @default(BRONZE)
  isPublic     Boolean       @default(false)

  // Usage tracking
  downloads Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type, category])
  @@index([tierRequired])
}

model AffiliateClick {
  id          String    @id @default(cuid())
  affiliateId String
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])

  clickId String  @unique
  linkId  String?

  // Visitor info
  ipAddress  String
  userAgent  String
  deviceType String?
  country    String?
  city       String?

  // Tracking data
  referrer    String?
  landingPage String?
  utmSource   String?
  utmMedium   String?
  utmCampaign String?

  // Conversion tracking
  converted       Boolean @default(false)
  conversionId    String?
  conversionValue Float?

  createdAt DateTime @default(now())

  @@index([affiliateId, createdAt])
  @@index([clickId])
}

// Enums for new models
enum FacilityType {
  GREENHOUSE
  INDOOR
  VERTICAL_FARM
  RESEARCH
  HYBRID
}

model MessageReaction {
  id        String   @id @default(cuid())
  messageId String
  message   ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  emoji     String
  createdAt DateTime @default(now())
  
  @@unique([messageId, userId, emoji])
  @@index([messageId])
}

enum FacilityRole {
  OWNER
  ADMIN
  MANAGER
  OPERATOR
  VIEWER
}

enum InvestmentType {
  EXPANSION
  EQUIPMENT
  TECHNOLOGY
  OPERATIONS
  RESEARCH
}

enum InvestmentStatus {
  DRAFT
  ACTIVE
  FUNDED
  CLOSED
  COMPLETED
}

enum PaymentSchedule {
  MONTHLY
  QUARTERLY
  ANNUAL
  AT_MATURITY
}

enum InvestmentTransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum PayoutType {
  INTEREST
  PRINCIPAL
  DIVIDEND
  BONUS
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum AffiliateTier {
  BRONZE // 0-5 referrals: 25% → 20% → 10%
  SILVER // 6-20 referrals: 30% → 25% → 15%
  GOLD // 21-50 referrals: 35% → 30% → 20%
  PLATINUM // 51+ referrals: 40% → 35% → 25%
  VIP // 100+ referrals: 50% → 40% → 30% + special perks
}

enum AffiliateStatus {
  PENDING
  ACTIVE
  SUSPENDED
  TERMINATED
}

enum ReferralStatus {
  PENDING
  SIGNED_UP
  CONVERTED
  EXPIRED
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

// Admin Log for audit trails
model AdminLog {
  id         String @id @default(cuid())
  adminId    String
  action     String
  targetType String
  targetId   String
  details    Json?

  createdAt DateTime @default(now())

  @@index([adminId, createdAt])
  @@index([targetType, targetId])
}

// Cost tracking models
model CostCategory {
  id          String  @id @default(cuid())
  name        String
  description String?
  type        String // labor, materials, utilities, etc
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expenses Expense[]

  @@index([name])
}

model Expense {
  id         String       @id @default(cuid())
  facilityId String
  categoryId String
  category   CostCategory @relation(fields: [categoryId], references: [id])

  amount        Float
  description   String
  batchId       String?
  batch         ProductionBatch? @relation(fields: [batchId], references: [id])
  cropType      String?
  vendorName    String?
  invoiceNumber String?
  expenseDate   DateTime
  recordedBy    String

  isRecurring        Boolean   @default(false)
  recurringFrequency String? // monthly, weekly, etc
  recurringEndDate   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([facilityId, expenseDate])
  @@index([batchId])
  @@index([categoryId])
}

model ProductionBatch {
  id         String  @id @default(cuid())
  facilityId String
  batchCode  String  @unique
  cropType   String
  cultivar   String?

  // Production data
  plantCount  Int
  startDate   DateTime
  harvestDate DateTime?
  status      BatchStatus @default(ACTIVE)

  // Yield data
  wetWeight   Float? // grams
  dryWeight   Float? // grams
  trimWeight  Float? // grams
  wasteWeight Float? // grams

  // Cost data
  directCosts  Float  @default(0)
  laborCosts   Float  @default(0)
  totalCosts   Float  @default(0)
  costPerGram  Float?
  costPerPound Float?

  // Quality data
  thcContent     Float?
  cbdContent     Float?
  terpeneProfile Json?
  qualityGrade   String?

  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expenses Expense[]

  @@index([facilityId, startDate])
  @@index([batchCode])
}

enum BatchStatus {
  PLANNED
  ACTIVE
  HARVESTED
  CURING
  COMPLETED
  CANCELLED
}

// Updated SensorReading model
model SensorReading {
  id         String   @id @default(cuid())
  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id])
  sensorId   String
  sensorType String
  zone       String?

  // Optional relations to greenhouse sensors
  zoneSensorId       String?
  zoneSensor         ZoneSensor?       @relation(fields: [zoneSensorId], references: [id])
  equipmentSensorId  String?
  equipmentSensor    EquipmentSensor?  @relation(fields: [equipmentSensorId], references: [id])

  value      Float
  unit       String
  quality    String  @default("good") // good, warning, error
  calibrated Boolean @default(true)

  timestamp DateTime
  createdAt DateTime @default(now())

  @@index([facilityId, timestamp])
  @@index([sensorType, timestamp])
  @@index([zoneSensorId])
  @@index([equipmentSensorId])
}

// Notification model
model Notification {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  type    String // NotificationType
  title   String
  message String
  data    Json?

  read   Boolean   @default(false)
  readAt DateTime?

  createdAt DateTime  @default(now())
  expiresAt DateTime?

  @@index([userId, read, createdAt])
  @@index([createdAt])
}

// Energy Optimization Models
model energy_optimization_config {
  id            String @id @default(cuid())
  facility_id   String @unique
  facility_name String

  control_system_type   String? // 'argus-titan', 'priva-connext', etc.
  control_system_config Json? // Connection parameters
  last_connection_test  DateTime?

  optimization_active Boolean @default(false)
  optimization_mode   String  @default("conservative") // conservative, balanced, aggressive

  crop_type    String @default("cannabis")
  growth_stage String @default("vegetative")

  peak_demand_limit       Float? // kW limit during peak hours
  emergency_contact_email String?

  stripe_customer_id String? // For billing

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([facility_id])
  @@index([optimization_active])
}

model power_readings {
  id          String   @id @default(cuid())
  facility_id String
  zone_id     String?
  timestamp   DateTime

  power_kw     Float
  energy_kwh   Float? // Cumulative kWh for billing period
  rate_per_kwh Float? // Rate at time of reading

  source    String  @default("meter") // meter, control_system, estimated
  device_id String?

  created_at DateTime @default(now())

  @@index([facility_id, timestamp])
  @@index([zone_id, timestamp])
  @@index([timestamp])
}

model energy_baselines {
  id          String @id @default(cuid())
  facility_id String

  baseline_name String
  start_date    DateTime
  end_date      DateTime

  avg_daily_kwh      Float
  avg_daily_cost     Float
  data_quality_score Float // 0-100 confidence level

  methodology String    @default("IPMVP Option C")
  approved    Boolean   @default(false)
  approved_by String?
  approved_at DateTime?

  created_at DateTime @default(now())

  @@index([facility_id])
  @@index([approved, facility_id])
}

model verified_savings {
  id          String @id @default(cuid())
  facility_id String

  billing_period_start DateTime
  billing_period_end   DateTime

  baseline_kwh  Float
  baseline_cost Float
  actual_kwh    Float
  actual_cost   Float

  kwh_saved            Float
  dollars_saved        Float
  percent_saved        Float
  revenue_share_amount Float // 20% of dollars_saved

  verification_method String @default("IPMVP Option C")
  confidence_score    Float // 0-100

  verified_by String
  verified_at DateTime

  invoice_number      String?
  invoice_sent_at     DateTime?
  payment_status      String    @default("pending") // pending, paid, failed
  payment_received_at DateTime?

  created_at DateTime @default(now())

  @@index([facility_id, billing_period_start])
  @@index([payment_status])
  @@index([invoice_number])
}

model optimization_events {
  id          String @id @default(cuid())
  facility_id String
  zone_id     String

  event_time   DateTime
  action_type  String // adjust_lighting, emergency_stop, etc.
  action_value Json // Command details

  before_state Json? // State before optimization
  after_state  Json? // State after optimization

  safety_score Float // 0-100 safety assessment
  crop_type    String
  growth_stage String

  ai_confidence Float? // Claude's confidence in recommendation
  ai_reasoning  String? // Claude's explanation

  created_at DateTime @default(now())

  @@index([facility_id, event_time])
  @@index([zone_id, event_time])
  @@index([action_type])
}

model utility_rates {
  id          String @id @default(cuid())
  facility_id String @unique

  utility_id         String
  utility_name       String
  rate_schedule_name String

  peak_rate     Float // $/kWh during peak hours
  off_peak_rate Float // $/kWh during off-peak hours
  shoulder_rate Float? // $/kWh during shoulder hours
  demand_charge Float // $/kW monthly demand charge

  time_of_use_schedule Json // Peak/off-peak schedule
  seasonal_rates       Json? // Summer/winter rate variations

  last_verified DateTime @default(now())
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@index([facility_id])
  @@index([utility_id])
}

// Security Models
model facility_security {
  id          String @id @default(cuid())
  facility_id String @unique

  security_level String @default("standard") // standard, enterprise, premium
  encryption_key String // Encrypted with master key
  access_tokens  String // Encrypted JSON of access tokens

  vpn_enabled Boolean @default(false)
  vpn_config  String? // Encrypted VPN configuration

  credential_rotation_at DateTime?
  last_security_audit    DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([facility_id])
  @@index([security_level])
}

model security_audit_log {
  id          String  @id @default(cuid())
  facility_id String
  user_id     String?

  action   String // access_granted, access_denied, credentials_rotated, etc.
  resource String // control_system, security_config, etc.

  ip_address String
  user_agent String
  success    Boolean
  details    String? // JSON details

  timestamp DateTime @default(now())

  @@index([facility_id, timestamp])
  @@index([action, timestamp])
  @@index([success, timestamp])
}

// Customer Onboarding & Support Models
model customer_profiles {
  id          String @id @default(cuid())
  facility_id String @unique

  company_name  String
  contact_name  String
  contact_email String
  phone         String

  facility_type       String // greenhouse, indoor, vertical_farm
  crop_types          String[] // Array of crop types
  facility_size       Float // Square feet
  current_energy_bill Float // Monthly energy cost
  zip_code            String
  time_zone           String   @default("America/Los_Angeles")

  control_system      String? // Detected/configured control system
  onboarding_progress Float   @default(0) // 0-100%
  onboarding_status   String  @default("not_started") // not_started, started, in_progress, completed

  assigned_csm String? // Customer Success Manager email
  go_live_date DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([facility_id])
  @@index([onboarding_status])
  @@index([assigned_csm])
}

model onboarding_plans {
  id          String @id @default(cuid())
  facility_id String @unique

  steps                      Json // Array of OnboardingStep objects
  estimated_completion_hours Float
  actual_completion_hours    Float?

  started_at   DateTime  @default(now())
  completed_at DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([facility_id])
}

model onboarding_events {
  id          String @id @default(cuid())
  facility_id String

  event_type String // step_completed, call_scheduled, training_completed, etc.
  details    Json? // Event-specific data

  timestamp DateTime @default(now())

  @@index([facility_id, timestamp])
  @@index([event_type])
}

model support_tickets {
  id          String @id @default(cuid())
  facility_id String

  subject     String
  description String
  priority    String // low, medium, high, urgent
  status      String @default("open") // open, in_progress, resolved, closed
  category    String // technical, billing, training, integration

  user_email  String
  assigned_to String?
  resolution  String?

  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  resolved_at DateTime?

  @@index([facility_id])
  @@index([status, priority])
  @@index([assigned_to])
  @@index([created_at])
}

// Legal & Compliance Models
model legal_agreements {
  id          String @id @default(cuid())
  facility_id String

  agreement_type String // energy_optimization, data_sharing, control_system_access
  version        String
  signed_by      String?
  signed_at      DateTime?
  ip_address     String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([facility_id, agreement_type, version])
  @@index([facility_id])
  @@index([agreement_type])
}

model liability_waivers {
  id          String @id @default(cuid())
  facility_id String

  waiver_type  String // crop_damage, equipment_failure, system_downtime
  acknowledged Boolean   @default(false)
  signed_by    String?
  signed_at    DateTime?
  ip_address   String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([facility_id, waiver_type])
  @@index([facility_id])
  @@index([waiver_type])
}

// Water Management Models
model WaterUsage {
  id         String   @id @default(cuid())
  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id])
  zone       String

  timestamp   DateTime @default(now())
  usage       Float // liters
  flow        Float // L/min
  pressure    Float // PSI
  temperature Float // °C
  ph          Float
  ec          Float // mS/cm
  runoff      Float // liters
  efficiency  Float? // percentage

  createdAt DateTime @default(now())

  @@index([facilityId, timestamp])
  @@index([zone, timestamp])
}

model WaterAlert {
  id         String   @id @default(cuid())
  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id])
  zone       String

  type           String // high_usage, low_pressure, ph_alert, ec_alert, leak, maintenance
  severity       String // low, medium, high, critical
  message        String
  acknowledged   Boolean   @default(false)
  acknowledgedBy String?
  acknowledgedAt DateTime?

  createdAt DateTime @default(now())

  @@index([facilityId, acknowledged])
  @@index([zone, acknowledged])
  @@index([createdAt])
}

model WaterZone {
  id         String @id @default(cuid())
  facilityId String
  name       String
  type       String // irrigation, fertigation, foliar, cleaning
  status     String @default("active") // active, inactive, maintenance, alert

  sensors    Json // { flowMeter, pressureSensor, phSensor, etc. }
  thresholds Json // Alert thresholds

  lastMaintenance DateTime?
  nextMaintenance DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([facilityId])
  @@index([status])
}

// Financial Integration Models
model FinancialIntegration {
  id         String @id @default(cuid())
  userId     String
  facilityId String
  provider   String // QUICKBOOKS, XERO, SAGE, etc.

  accessToken  String // Encrypted
  refreshToken String // Encrypted
  config       Json // Provider-specific configuration

  active     Boolean   @default(true)
  lastSyncAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, facilityId, provider])
  @@index([userId])
  @@index([provider])
  @@index([active])
}

model FinancialDocument {
  id         String  @id @default(cuid())
  userId     String
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  facilityId String?

  // File information
  filename     String
  originalName String
  fileType     String
  fileSize     Int
  filePath     String

  // Analysis results
  documentType   String // profit_loss, balance_sheet, cash_flow, bank_statement, etc.
  analysisResult Json // Full Claude analysis result
  extractedData  Json // Structured financial data
  confidence     Int // 0-100 confidence score

  // Financial period
  period   Json? // { startDate, endDate }
  currency String?

  // Processing status
  processingStatus String   @default("PENDING") // PENDING, PROCESSING, COMPLETED, ERROR
  errors           String[]
  warnings         String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([facilityId])
  @@index([documentType])
  @@index([processingStatus])
}

model DiseasePrediction {
  id         String @id @default(cuid())
  facilityId String
  userId     String

  predictions Json // Array of prediction results
  conditions  Json // Environmental conditions at time of prediction
  cropInfo    Json // Crop information

  createdAt DateTime @default(now())

  @@index([facilityId, createdAt])
  @@index([userId, createdAt])
}

// Session Management Models
model UserSession {
  id     String @id
  userId String
  user   User   @relation(fields: [userId], references: [id])

  deviceFingerprint String
  ipAddress         String
  userAgent         String
  location          String? // Geolocation data

  createdAt    DateTime @default(now())
  lastActiveAt DateTime @default(now())
  expiresAt    DateTime

  isActive          Boolean   @default(true)
  terminatedAt      DateTime?
  terminationReason String?

  @@index([userId, isActive])
  @@index([deviceFingerprint])
  @@index([expiresAt])
}

model AuditLog {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  action     String // LOGIN, LOGOUT, UPDATE_SETTINGS, etc.
  entityType String? // User, Facility, Project, etc.
  entityId   String?

  details   Json? // Additional context
  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())

  @@index([userId, createdAt])
  @@index([action, createdAt])
  @@index([entityType, entityId])
}

model SecurityEvent {
  id     String  @id @default(cuid())
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  eventType String // SUSPICIOUS_LOGIN, BRUTE_FORCE, CREDENTIAL_SHARING, etc.
  severity  String // low, medium, high, critical

  details    Json // Event-specific details
  ipAddress  String?
  resolved   Boolean   @default(false)
  resolvedAt DateTime?
  resolvedBy String?

  createdAt DateTime @default(now())

  @@index([userId, createdAt])
  @@index([eventType, severity])
  @@index([resolved, createdAt])
}

// Maintenance and Service Network Models

// Service Provider Models
model ServiceProvider {
  id          String @id @default(cuid())
  companyName String
  contactName String
  email       String @unique
  phone       String

  // Business details
  businessType    ServiceProviderType
  licenseNumber   String?
  insuranceNumber String?
  bondNumber      String?

  // Location and coverage
  address       String
  city          String
  state         String
  zipCode       String
  country       String @default("US")
  serviceRadius Float  @default(50) // miles
  geoLocation   Json? // { lat, lng }

  // Verification and ratings
  verified      Boolean   @default(false)
  verifiedAt    DateTime?
  rating        Float     @default(0)
  reviewCount   Int       @default(0)
  completedJobs Int       @default(0)

  // Availability
  status           ServiceProviderStatus @default(PENDING)
  availability     Json? // Schedule availability
  emergencyService Boolean               @default(false)

  // Financial
  stripeAccountId String?
  taxId           String?
  w9OnFile        Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  certifications     ServiceProviderCertification[]
  specializations    ServiceProviderSpecialization[]
  serviceAreas       ServiceArea[]
  serviceRequests    ServiceRequest[]
  maintenanceRecords MaintenanceRecord[]
  serviceBids        ServiceBid[]
  workOrders         WorkOrder[]
  reviews            ServiceReview[]

  @@index([status, serviceRadius])
  @@index([rating, reviewCount])
  @@index([city, state])
}

model ServiceProviderCertification {
  id                String          @id @default(cuid())
  serviceProviderId String
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])

  certificationType   CertificationType
  certificationBody   String
  certificationNumber String
  issueDate           DateTime
  expirationDate      DateTime?
  verified            Boolean           @default(false)
  documentUrl         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([serviceProviderId, certificationType])
  @@index([expirationDate])
}

model ServiceProviderSpecialization {
  id                String          @id @default(cuid())
  serviceProviderId String
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])

  category        ServiceCategory
  subcategory     String?
  experienceYears Int             @default(0)
  skillLevel      SkillLevel      @default(BEGINNER)

  createdAt DateTime @default(now())

  @@unique([serviceProviderId, category, subcategory])
  @@index([category, skillLevel])
}

model ServiceArea {
  id                String          @id @default(cuid())
  serviceProviderId String
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])

  zipCode    String
  city       String
  state      String
  travelTime Int? // minutes
  serviceFee Float? // additional fee for this area

  createdAt DateTime @default(now())

  @@unique([serviceProviderId, zipCode])
  @@index([zipCode, state])
}

// Equipment and Warranty Models
model Equipment {
  id         String   @id @default(cuid())
  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id])

  // Equipment details
  name         String
  category     EquipmentCategory
  manufacturer String
  model        String
  serialNumber String?

  // Installation details
  installDate     DateTime
  installLocation String? // Zone, room, etc.
  installedBy     String? // Service provider ID

  // Warranty information
  warrantyStart    DateTime
  warrantyEnd      DateTime
  warrantyTerms    Json? // Warranty terms and conditions
  warrantyProvider String? // Manufacturer or extended warranty provider

  // Performance metrics
  uptime              Float     @default(100) // percentage
  lastMaintenance     DateTime?
  nextMaintenance     DateTime?
  maintenanceInterval Int? // days

  // Status and health
  status        EquipmentStatus @default(ACTIVE)
  healthScore   Float           @default(100) // 0-100
  alertsEnabled Boolean         @default(true)

  // Financial
  purchasePrice Float?
  currentValue  Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  maintenanceRecords    MaintenanceRecord[]
  maintenanceSchedules  MaintenanceSchedule[]
  serviceRequests       ServiceRequest[]
  performanceGuarantees PerformanceGuarantee[]

  @@index([facilityId, category])
  @@index([warrantyEnd])
  @@index([nextMaintenance])
}

model PerformanceGuarantee {
  id          String    @id @default(cuid())
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])

  // Guarantee details
  guaranteeType GuaranteeType
  description   String
  startDate     DateTime
  endDate       DateTime

  // Performance metrics
  targetMetric    String // uptime, efficiency, output, etc.
  targetValue     Float
  currentValue    Float  @default(0)
  measurementUnit String

  // Financial penalties
  penaltyStructure Json? // Penalty amounts for non-compliance
  maxPenalty       Float?
  penaltiesApplied Float  @default(0)

  // Status
  status         GuaranteeStatus @default(ACTIVE)
  violationCount Int             @default(0)
  lastViolation  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  violations GuaranteeViolation[]

  @@index([equipmentId, status])
  @@index([endDate, status])
}

model GuaranteeViolation {
  id                     String               @id @default(cuid())
  performanceGuaranteeId String
  performanceGuarantee   PerformanceGuarantee @relation(fields: [performanceGuaranteeId], references: [id])

  violationDate    DateTime
  actualValue      Float
  targetValue      Float
  deviationPercent Float

  penaltyAmount    Float     @default(0)
  penaltyApplied   Boolean   @default(false)
  penaltyAppliedAt DateTime?

  description String?
  resolved    Boolean   @default(false)
  resolvedAt  DateTime?
  resolution  String?

  createdAt DateTime @default(now())

  @@index([performanceGuaranteeId, violationDate])
}

// Maintenance and Service Request Models
model MaintenanceSchedule {
  id          String    @id @default(cuid())
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])

  // Schedule details
  name         String
  description  String?
  scheduleType MaintenanceType
  frequency    MaintenanceFrequency

  // Timing
  intervalDays  Int? // For recurring maintenance
  intervalHours Int? // For hour-based maintenance
  lastPerformed DateTime?
  nextDue       DateTime

  // Assignment
  assignedTo        String? // Service provider ID
  estimatedDuration Int? // minutes
  priority          MaintenancePriority @default(MEDIUM)

  // Predictive maintenance
  predictiveEnabled Boolean @default(false)
  triggerConditions Json? // Conditions that trigger maintenance

  // Status
  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  records MaintenanceRecord[]

  @@index([equipmentId, nextDue])
  @@index([nextDue, priority])
}

model MaintenanceRecord {
  id                    String               @id @default(cuid())
  equipmentId           String
  equipment             Equipment            @relation(fields: [equipmentId], references: [id])
  maintenanceScheduleId String?
  maintenanceSchedule   MaintenanceSchedule? @relation(fields: [maintenanceScheduleId], references: [id])

  // Service details
  serviceType MaintenanceType
  description String

  // Timing
  scheduledDate DateTime
  startTime     DateTime?
  endTime       DateTime?
  duration      Int? // minutes

  // Service provider
  serviceProviderId String?
  serviceProvider   ServiceProvider? @relation(fields: [serviceProviderId], references: [id])
  technicianName    String?

  // Work performed
  workPerformed String?
  partsUsed     Json? // Array of parts with costs
  laborHours    Float?
  totalCost     Float?

  // Results
  status          MaintenanceStatus @default(SCHEDULED)
  completionNotes String?
  beforePhotos    String[] // Array of photo URLs
  afterPhotos     String[] // Array of photo URLs

  // Quality and compliance
  qualityCheck      Boolean @default(false)
  qualityCheckBy    String?
  complianceCheck   Boolean @default(false)
  certificateIssued Boolean @default(false)
  certificateUrl    String?

  // Next maintenance
  nextMaintenanceDate DateTime?
  recommendedActions  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([equipmentId, scheduledDate])
  @@index([serviceProviderId, status])
}

model ServiceRequest {
  id          String   @id @default(cuid())
  facilityId  String
  facility    Facility @relation(fields: [facilityId], references: [id])
  requesterId String
  requester   User     @relation(fields: [requesterId], references: [id])

  // Request details
  title       String
  description String
  category    ServiceCategory
  priority    ServicePriority @default(MEDIUM)
  urgency     ServiceUrgency  @default(STANDARD)

  // Equipment related
  equipmentId String?
  equipment   Equipment? @relation(fields: [equipmentId], references: [id])

  // Location
  location           String? // Specific location within facility
  accessInstructions String?

  // Timing
  preferredDate    DateTime?
  flexibleTiming   Boolean   @default(true)
  emergencyService Boolean   @default(false)

  // Budget
  budgetRange String? // "under-500", "500-1000", etc.
  maxBudget   Float?

  // Status and assignment
  status          ServiceRequestStatus @default(OPEN)
  assignedTo      String? // Service provider ID
  serviceProvider ServiceProvider?     @relation(fields: [assignedTo], references: [id])
  assignedAt      DateTime?

  // Bidding
  biddingEnabled  Boolean   @default(true)
  biddingDeadline DateTime?

  // Photos and documentation
  photos    String[] // Array of photo URLs
  documents String[] // Array of document URLs

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bids      ServiceBid[]
  workOrder WorkOrder?
  messages  ServiceMessage[]

  @@index([facilityId, status])
  @@index([category, status])
  @@index([priority, createdAt])
}

model ServiceBid {
  id                String          @id @default(cuid())
  serviceRequestId  String
  serviceRequest    ServiceRequest  @relation(fields: [serviceRequestId], references: [id])
  serviceProviderId String
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])

  // Bid details
  amount            Float
  description       String
  estimatedDuration Int? // hours
  proposedDate      DateTime?

  // Terms
  warrantyOffered Boolean @default(false)
  warrantyTerms   String?
  paymentTerms    String?

  // Materials and labor breakdown
  laborCost     Float?
  materialsCost Float?
  travelCost    Float?
  breakdown     Json? // Detailed cost breakdown

  // Status
  status          BidStatus @default(SUBMITTED)
  acceptedAt      DateTime?
  rejectedAt      DateTime?
  rejectionReason String?

  // Validity
  validUntil DateTime?

  // Communication
  questions String? // Questions from service provider

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([serviceRequestId, status])
  @@index([serviceProviderId, status])
}

model WorkOrder {
  id                String          @id @default(cuid())
  serviceRequestId  String          @unique
  serviceRequest    ServiceRequest  @relation(fields: [serviceRequestId], references: [id])
  serviceProviderId String
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])

  // Work order details
  workOrderNumber String @unique
  title           String
  description     String

  // Timing
  scheduledDate     DateTime
  estimatedDuration Int? // hours
  startTime         DateTime?
  endTime           DateTime?

  // Financial
  agreedAmount    Float
  laborCost       Float?
  materialsCost   Float?
  additionalCosts Float  @default(0)
  totalCost       Float?

  // Status tracking
  status   WorkOrderStatus @default(SCHEDULED)
  progress Int             @default(0) // percentage

  // Work details
  workPerformed String?
  materialsUsed Json? // Array of materials
  hoursWorked   Float?

  // Quality control
  qualityCheck     Boolean   @default(false)
  qualityRating    Float? // 1-5 stars
  customerApproval Boolean   @default(false)
  approvedAt       DateTime?

  // Documentation
  beforePhotos String[] // Array of photo URLs
  afterPhotos  String[] // Array of photo URLs
  invoiceUrl   String?
  certificate  String?

  // Payment
  paymentStatus MarketplacePaymentStatus @default(PENDING)
  paidAt        DateTime?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  timeEntries WorkOrderTimeEntry[]
  expenses    WorkOrderExpense[]
  review      ServiceReview?

  @@index([serviceProviderId, status])
  @@index([scheduledDate, status])
}

model WorkOrderTimeEntry {
  id          String    @id @default(cuid())
  workOrderId String
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])

  date      DateTime
  startTime DateTime
  endTime   DateTime?
  hours     Float?

  description String?
  hourlyRate  Float?
  totalCost   Float?

  createdAt DateTime @default(now())

  @@index([workOrderId, date])
}

model WorkOrderExpense {
  id          String    @id @default(cuid())
  workOrderId String
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])

  category    String // materials, travel, equipment, etc.
  description String
  amount      Float
  receipt     String? // Receipt photo URL

  createdAt DateTime @default(now())

  @@index([workOrderId, category])
}

model ServiceMessage {
  id               String         @id @default(cuid())
  serviceRequestId String
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id])

  senderId    String // User ID or Service Provider ID
  senderType  String // "customer" or "provider"
  message     String
  attachments String[] // Array of file URLs

  read   Boolean   @default(false)
  readAt DateTime?

  createdAt DateTime @default(now())

  @@index([serviceRequestId, createdAt])
}

model ServiceReview {
  id                String          @id @default(cuid())
  serviceProviderId String
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  workOrderId       String          @unique
  workOrder         WorkOrder       @relation(fields: [workOrderId], references: [id])
  reviewerId        String
  reviewer          User            @relation(fields: [reviewerId], references: [id])

  // Ratings (1-5 stars)
  overallRating       Float
  qualityRating       Float?
  timelinessRating    Float?
  communicationRating Float?
  valueRating         Float?

  // Review content
  title   String?
  comment String?
  photos  String[] // Array of photo URLs

  // Verification
  verified   Boolean   @default(false)
  verifiedAt DateTime?

  // Response
  response    String? // Service provider response
  respondedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([serviceProviderId, overallRating])
  @@index([reviewerId, createdAt])
}

// Enums for Maintenance and Service Network

enum ServiceProviderType {
  INDIVIDUAL
  COMPANY
  PARTNERSHIP
  CORPORATION
}

enum ServiceProviderStatus {
  PENDING
  ACTIVE
  SUSPENDED
  INACTIVE
  REJECTED
}

enum CertificationType {
  ELECTRICAL
  HVAC
  PLUMBING
  IRRIGATION
  INTEGRATED_PEST_MANAGEMENT
  ORGANIC_CERTIFICATION
  SAFETY_CERTIFICATION
  EQUIPMENT_SPECIFIC
  REGULATORY_COMPLIANCE
}

enum ServiceCategory {
  LIGHTING_SYSTEMS
  HVAC_CLIMATE_CONTROL
  IRRIGATION_FERTIGATION
  ELECTRICAL_SYSTEMS
  AUTOMATION_CONTROLS
  PEST_MANAGEMENT
  EQUIPMENT_INSTALLATION
  EQUIPMENT_REPAIR
  PREVENTIVE_MAINTENANCE
  EMERGENCY_SERVICES
  CONSULTATION
  TRAINING
  COMPLIANCE_AUDIT
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum EquipmentCategory {
  LIGHTING
  HVAC
  IRRIGATION
  ELECTRICAL
  AUTOMATION
  SENSORS
  SECURITY
  PACKAGING
  PROCESSING
}

enum EquipmentStatus {
  ACTIVE
  MAINTENANCE
  REPAIR
  OFFLINE
  DECOMMISSIONED
}

enum GuaranteeType {
  UPTIME
  EFFICIENCY
  OUTPUT
  QUALITY
  ENERGY_SAVINGS
  CUSTOM
}

enum GuaranteeStatus {
  ACTIVE
  VIOLATED
  EXPIRED
  CANCELLED
}

enum MaintenanceType {
  PREVENTIVE
  PREDICTIVE
  CORRECTIVE
  EMERGENCY
  INSPECTION
  CALIBRATION
  CLEANING
}

enum MaintenanceFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  SEMI_ANNUAL
  ANNUAL
  CONDITION_BASED
  RUNTIME_BASED
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

enum ServicePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ServiceUrgency {
  STANDARD
  URGENT
  EMERGENCY
}

enum ServiceRequestStatus {
  OPEN
  BIDDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum BidStatus {
  SUBMITTED
  ACCEPTED
  REJECTED
  WITHDRAWN
  EXPIRED
}

enum WorkOrderStatus {
  SCHEDULED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIAL
  OVERDUE
  DISPUTED
}

// Equipment Investment Request Board Models
model EquipmentRequest {
  id          String   @id @default(cuid())
  facilityId  String
  facility    Facility @relation(fields: [facilityId], references: [id])
  requesterId String
  requester   User     @relation(fields: [requesterId], references: [id])

  // Equipment Details
  equipmentType  String // LED lights, HVAC, sensors, etc.
  brand          String? // Preferred brand if any
  specifications Json // Detailed specs needed
  quantity       Int
  estimatedValue Float // Estimated total value

  // Investment Terms
  proposedRevShare Float // Proposed revenue share percentage
  termMonths       Int // Length of agreement
  minPerformance   Json? // Minimum performance guarantees

  // Request Details
  title            String
  description      String  @db.Text
  useCase          String  @db.Text
  expectedROI      Float? // Expected ROI percentage
  currentSituation String? @db.Text // Current equipment/situation

  // Location & Timeline
  deliveryLocation  String
  neededBy          DateTime
  installationReady Boolean  @default(false)

  // Status
  status    EquipmentRequestStatus @default(OPEN)
  viewCount Int                    @default(0)

  // Platform Fee (15%)
  platformFeeRate Float @default(0.15)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?

  // Relations
  offers    EquipmentOffer[]
  matches   EquipmentMatch[]
  documents EquipmentDocument[]
  questions EquipmentQuestion[]
}

model EquipmentOffer {
  id         String           @id @default(cuid())
  requestId  String
  request    EquipmentRequest @relation(fields: [requestId], references: [id])
  investorId String
  investor   User             @relation(fields: [investorId], references: [id])

  // Equipment Offered
  equipmentDetails   Json // Detailed equipment specs
  condition          EquipmentCondition
  age                Int? // Age in months
  hoursUsed          Int? // Operating hours if applicable
  maintenanceHistory Json? // Maintenance records

  // Financial Terms
  equipmentValue   Float // Investor's valuation
  proposedRevShare Float // Counter-offer on revenue share
  termMonths       Int // Counter-offer on term length

  // Additional Terms
  warranty     String? // Warranty details
  installation Boolean // Installation included?
  maintenance  Boolean // Maintenance included?
  training     Boolean // Training included?

  // Offer Details
  message    String   @db.Text
  highlights String[] // Key selling points

  // Status
  status OfferStatus @default(PENDING)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?

  // Relations
  match     EquipmentMatch?
  documents EquipmentOfferDocument[]
}

model EquipmentMatch {
  id        String           @id @default(cuid())
  requestId String           @unique
  request   EquipmentRequest @relation(fields: [requestId], references: [id])
  offerId   String           @unique
  offer     EquipmentOffer   @relation(fields: [offerId], references: [id])

  // Final Terms
  finalRevShare   Float
  finalTermMonths Int
  finalValue      Float

  // Platform Fee
  platformFee     Float // 15% of equipment value
  platformFeePaid Boolean @default(false)

  // Agreement Details
  agreementHash   String? // IPFS hash of agreement
  contractAddress String? // Smart contract address

  // Status
  status MatchStatus @default(PENDING_ESCROW)

  // Important Dates
  matchedAt   DateTime  @default(now())
  escrowedAt  DateTime?
  deliveredAt DateTime?
  installedAt DateTime?
  activatedAt DateTime?

  // Relations
  escrow       EquipmentEscrow?
  verification EquipmentVerification?
}

model EquipmentEscrow {
  id      String         @id @default(cuid())
  matchId String         @unique
  match   EquipmentMatch @relation(fields: [matchId], references: [id])

  // Escrow Details
  escrowAddress     String // Smart contract escrow address
  totalAmount       Float // Total held in escrow
  platformFeeAmount Float // 15% platform fee portion

  // Release Conditions
  releaseConditions Json // Conditions for release
  conditionsMet     Boolean @default(false)

  // Status
  status EscrowStatus @default(FUNDED)

  // Timestamps
  fundedAt   DateTime  @default(now())
  releasedAt DateTime?
  refundedAt DateTime?

  // Relations
  transactions EscrowTransaction[]
}

model EscrowTransaction {
  id       String          @id @default(cuid())
  escrowId String
  escrow   EquipmentEscrow @relation(fields: [escrowId], references: [id])

  transactionHash String                @unique
  type            EscrowTransactionType
  amount          Float
  fromAddress     String
  toAddress       String

  createdAt DateTime @default(now())
}

model EquipmentVerification {
  id      String         @id @default(cuid())
  matchId String         @unique
  match   EquipmentMatch @relation(fields: [matchId], references: [id])

  // Verification Steps
  equipmentReceived Boolean @default(false)
  specsMet          Boolean @default(false)
  installed         Boolean @default(false)
  operational       Boolean @default(false)

  // IoT Verification
  iotConnected        Boolean @default(false)
  performanceVerified Boolean @default(false)

  // Evidence
  photos     String[] // URLs to verification photos
  documents  String[] // Inspection reports, etc.
  sensorData Json? // Initial sensor readings

  verifiedBy String? // Inspector/technician ID
  verifiedAt DateTime?
  notes      String?   @db.Text
}

model EquipmentDocument {
  id        String           @id @default(cuid())
  requestId String
  request   EquipmentRequest @relation(fields: [requestId], references: [id])

  name String
  type DocumentType
  url  String // IPFS or S3 URL
  size Int // File size in bytes

  uploadedBy String
  uploadedAt DateTime @default(now())
}

model EquipmentOfferDocument {
  id      String         @id @default(cuid())
  offerId String
  offer   EquipmentOffer @relation(fields: [offerId], references: [id])

  name String
  type DocumentType
  url  String
  size Int

  uploadedAt DateTime @default(now())
}

model EquipmentQuestion {
  id        String           @id @default(cuid())
  requestId String
  request   EquipmentRequest @relation(fields: [requestId], references: [id])

  askerId String
  asker   User   @relation(fields: [askerId], references: [id])

  question   String  @db.Text
  answer     String? @db.Text
  answeredBy String?

  isPublic Boolean @default(true)

  askedAt    DateTime  @default(now())
  answeredAt DateTime?
}

// Equipment Request Board Enums
enum EquipmentRequestStatus {
  DRAFT
  OPEN
  REVIEWING_OFFERS
  MATCHED
  IN_ESCROW
  DELIVERED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum EquipmentCondition {
  NEW
  LIKE_NEW
  EXCELLENT
  GOOD
  FAIR
  NEEDS_REPAIR
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
  EXPIRED
  COUNTERED
}

enum MatchStatus {
  PENDING_ESCROW
  IN_ESCROW
  PENDING_DELIVERY
  PENDING_VERIFICATION
  ACTIVE
  COMPLETED
  DISPUTED
  CANCELLED
}

enum EscrowStatus {
  PENDING
  FUNDED
  PARTIALLY_FUNDED
  RELEASED
  REFUNDED
  DISPUTED
}

enum EscrowTransactionType {
  FUND
  RELEASE
  REFUND
  FEE_PAYMENT
}

enum DocumentType {
  SPECIFICATION
  WARRANTY
  INSPECTION_REPORT
  PHOTO
  VIDEO
  AGREEMENT
  INVOICE
  OTHER
}

// Utility Bill Data Model
model UtilityBillData {
  id                 String             @id @default(cuid())
  clientId           String
  connectionId       String?
  connection         UtilityConnection? @relation(fields: [connectionId], references: [id])
  fileName           String
  extractedData      Json
  accountNumber      String?
  billingPeriodStart DateTime?
  billingPeriodEnd   DateTime?
  totalKwh           Float?
  peakDemand         Float?
  totalCharges       Float?
  rateSchedule       String?
  timeOfUseData      Json?
  status             String             @default("pending") // pending, processed, failed
  processedAt        DateTime?
  processedBy        String? // manual, claude-api, utility-api
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  client User @relation(fields: [clientId], references: [id])

  @@index([clientId])
  @@index([billingPeriodEnd])
}

// Client Baseline Model
model ClientBaseline {
  id                String    @id @default(cuid())
  clientId          String    @unique
  averageMonthlyKwh Float
  averagePeakDemand Float
  baselineStart     DateTime?
  baselineEnd       DateTime?
  dataPoints        Int // Number of bills used to calculate baseline
  seasonalFactors   Json? // Seasonal adjustment factors
  status            String    @default("calculating") // calculating, verified, manual
  lastUpdated       DateTime  @default(now())
  createdAt         DateTime  @default(now())

  client User @relation(fields: [clientId], references: [id])
}

// VibeLux Invoice Model
model VibeLuxInvoice {
  id               String    @id @default(cuid())
  clientId         String
  invoiceNumber    String    @unique
  billingPeriod    String
  baselineKwh      Float
  actualKwh        Float
  savingsKwh       Float
  savingsAmount    Float
  sharePercentage  Float     @default(50) // Default 50% share
  invoiceAmount    Float
  verificationData Json? // Links to utility bills and IoT data
  status           String    @default("draft") // draft, pending, sent, paid
  dueDate          DateTime
  sentAt           DateTime?
  paidAt           DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  client   User             @relation(fields: [clientId], references: [id])
  disputes VibeLuxDispute[]

  @@index([clientId])
  @@index([status])
}

// Dispute Model
model VibeLuxDispute {
  id               String    @id @default(cuid())
  invoiceId        String
  reason           String
  description      String
  status           String    @default("open") // open, under-review, resolved, rejected
  resolution       String?
  utilityDataProof Json? // Utility bill data supporting resolution
  resolvedAt       DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  invoice VibeLuxInvoice @relation(fields: [invoiceId], references: [id])

  @@index([invoiceId])
}

// ============================================
// NEW PRODUCTION SYSTEMS - ADDED FOR COMPLETION
// ============================================

// Utility Connection & Authorization Models
model UtilityConnection {
  id               String  @id @default(cuid())
  customerId       String
  utilityProvider  String // Name of utility company
  apiProvider      String // 'utilityapi', 'arcadia', 'manual'
  utilityAccountId String? // External account ID
  status           String // 'ACTIVE', 'DISCONNECTED', 'ERROR'

  accessToken          String? // Encrypted access token
  refreshToken         String? // Encrypted refresh token  
  tokenExpiresAt       DateTime?
  externalConnectionId String? // Provider's connection ID

  lastSyncAt     DateTime?
  lastError      String?
  lastErrorAt    DateTime?
  disconnectedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bills  UtilityBillData[]
  User   User?             @relation(fields: [userId], references: [id])
  userId String?

  @@index([customerId, status])
  @@index([apiProvider, status])
}

model UtilityAuthorization {
  id         String  @id @default(cuid())
  customerId String
  utility    String // Utility name
  state      String  @unique // Encrypted authorization state
  status     String // 'PENDING', 'COMPLETED', 'FAILED'
  authUrl    String? // Authorization URL
  provider   String  @default("utilityapi") // 'utilityapi', 'arcadia'

  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([customerId, status])
}

// Enhanced Utility Bill Data
// ===================== MARKETPLACE MODELS =====================

// Marketplace Vendor Model
model MarketplaceVendor {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Business Information
  businessName    String
  businessType    MarketplaceVendorBusinessType
  taxId           String?
  yearEstablished Int?
  description     String?

  // Contact and Location
  contactEmail  String
  contactPhone  String?
  address       Json? // { street, city, state, zip, country }
  shippingZones String[] // Array of supported regions

  // Verification and Status
  verified         Boolean                 @default(false)
  verificationDate DateTime?
  status           MarketplaceVendorStatus @default(PENDING)

  // Business Metrics
  rating       Float @default(0)
  reviewCount  Int   @default(0)
  totalSales   Int   @default(0)
  minimumOrder Float @default(0)

  // Payment and Terms
  paymentTerms   String @default("Net 30")
  bankingInfo    Json? // Encrypted banking details
  commissionRate Float  @default(0.15) // Platform commission rate

  // Certifications and Specialties
  certifications String[] // Array of certification names
  specialties    String[] // Array of specialty areas

  // Platform Integration
  apiKeyEnabled Boolean @default(false)
  webhookUrl    String?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  lastActive DateTime?

  // Relations
  products         MarketplaceProduct[]
  orders           MarketplaceOrder[]   @relation("OrderVendor")
  geneticsListings GeneticsListing[]
  rfqQuotes        RFQQuote[]

  @@index([verified])
  @@index([status])
  @@index([businessType])
  @@index([rating])
}

// Marketplace Product Model
model MarketplaceProduct {
  id       String            @id @default(cuid())
  vendorId String
  vendor   MarketplaceVendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  userId   String
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Basic Product Information
  name        String
  description String
  brand       String?
  model       String?
  sku         String?                    @unique
  category    MarketplaceProductCategory
  subcategory String?

  // Pricing
  listPrice      Float
  wholesalePrice Float?
  bulkPricing    Json? // { quantity: number, price: number }[]
  currency       String @default("USD")

  // Inventory
  stockQuantity     Int                    @default(0)
  stockStatus       MarketplaceStockStatus @default(IN_STOCK)
  lowStockThreshold Int                    @default(10)
  leadTime          Int                    @default(7) // Days

  // Product Details
  specifications Json? // Technical specifications
  dimensions     Json? // { length, width, height, weight }
  images         String[] // Array of image URLs
  documents      String[] // Array of document URLs (PDFs, manuals)

  // Quality and Certifications
  warranty       String?
  certifications String[]
  tags           String[]

  // Status and Visibility
  status         MarketplaceProductStatus @default(DRAFT)
  featured       Boolean                  @default(false)
  searchKeywords String?

  // SEO and Marketing
  metaTitle       String?
  metaDescription String?

  // Analytics
  viewCount     Int       @default(0)
  purchaseCount Int       @default(0)
  lastViewed    DateTime?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?

  // Relations
  cartItems     MarketplaceCartItem[]
  orderItems    MarketplaceOrderItem[]
  inventoryLogs InventoryLog[]
  // Note: Fulltext search not supported with PostgreSQL, use external search solution

  @@index([vendorId])
  @@index([category])
  @@index([status])
  @@index([stockStatus])
  @@index([featured])
}

// Shopping Cart Model
model MarketplaceCartItem {
  id        String             @id @default(cuid())
  userId    String
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   MarketplaceProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

  quantity Int
  price    Float // Price at time of adding to cart
  notes    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@index([userId])
}

// Order Management
model MarketplaceOrder {
  id          String @id @default(cuid())
  orderNumber String @unique

  // Buyer Information
  buyerId String
  buyer   User   @relation("OrderBuyer", fields: [buyerId], references: [id])

  // Vendor Information  
  vendorId     String
  vendor       MarketplaceVendor @relation("OrderVendor", fields: [vendorId], references: [id])
  vendorUserId String
  vendorUser   User              @relation("OrderVendor", fields: [vendorUserId], references: [id])

  // Order Status
  status    MarketplaceOrderStatus @default(PENDING)
  orderType MarketplaceOrderType   @default(STANDARD)

  // Financial Information
  subtotal    Float
  taxAmount   Float  @default(0)
  shippingFee Float  @default(0)
  platformFee Float // VibeLux commission
  totalAmount Float
  currency    String @default("USD")

  // Shipping Information
  shippingAddress   Json // { name, street, city, state, zip, country }
  billingAddress    Json // { name, street, city, state, zip, country }
  shippingMethod    String?
  trackingNumber    String?
  estimatedDelivery DateTime?
  actualDelivery    DateTime?

  // Payment Information
  paymentMethod   String // stripe, bank_transfer, etc.
  paymentStatus   MarketplacePaymentStatus @default(PENDING)
  stripePaymentId String?
  paymentDate     DateTime?

  // Additional Information
  notes         String?
  internalNotes String? // For vendor/admin use

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  confirmedAt DateTime?
  shippedAt   DateTime?
  deliveredAt DateTime?
  cancelledAt DateTime?

  // Relations
  items         MarketplaceOrderItem[]
  statusHistory OrderStatusHistory[]

  @@index([buyerId])
  @@index([vendorId])
  @@index([status])
  @@index([paymentStatus])
  @@index([createdAt])
}

// Order Items
model MarketplaceOrderItem {
  id        String             @id @default(cuid())
  orderId   String
  order     MarketplaceOrder   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   MarketplaceProduct @relation(fields: [productId], references: [id])

  quantity   Int
  unitPrice  Float
  totalPrice Float

  // Product snapshot at time of order
  productSnapshot Json // Store product details at time of purchase

  createdAt DateTime @default(now())

  @@index([orderId])
  @@index([productId])
}

// Order Status Tracking
model OrderStatusHistory {
  id      String           @id @default(cuid())
  orderId String
  order   MarketplaceOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)

  status    MarketplaceOrderStatus
  notes     String?
  createdBy String? // User ID who made the change

  createdAt DateTime @default(now())

  @@index([orderId])
  @@index([createdAt])
}

// Genetics Marketplace
model GeneticsListing {
  id       String            @id @default(cuid())
  vendorId String
  vendor   MarketplaceVendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  userId   String
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Basic Information
  strain      String
  type        GeneticsType
  description String

  // Genetics Information
  lineage        String?
  thcRange       Json // { min: number, max: number }
  cbdRange       Json // { min: number, max: number }
  terpenes       String[]
  floweringTime  Int? // weeks
  yieldPotential String?

  // Licensing and Availability
  licensingType LicensingType
  royaltyRate   Float?
  minimumOrder  Int?
  availability  Int
  pricePerUnit  Float

  // Quality Assurance
  labResults     String? // URL to lab results
  certifications String[]
  virusFree      Boolean  @default(false)

  // Restrictions
  territoryRestrictions String[]
  ageRestrictions       Boolean  @default(true)

  // Media
  images String[]
  videos String[]

  // Status
  status   MarketplaceProductStatus @default(DRAFT)
  featured Boolean                  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Note: Fulltext search not supported with PostgreSQL, use external search solution

  @@index([vendorId])
  @@index([type])
  @@index([status])
}

// Request for Quote System
model RequestForQuote {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // RFQ Details
  title       String
  description String
  category    String
  quantity    Int
  targetPrice Float?
  currency    String @default("USD")

  // Timeline
  neededBy   DateTime
  validUntil DateTime

  // Requirements
  specifications   Json? // Technical requirements
  deliveryLocation Json // { city, state, country }
  paymentTerms     String?

  // Attachments
  attachments String[] // Array of file URLs

  // Status
  status RFQStatus @default(OPEN)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  closedAt  DateTime?

  // Relations
  quotes RFQQuote[]

  @@index([userId])
  @@index([status])
  @@index([category])
  @@index([neededBy])
}

// RFQ Quotes
model RFQQuote {
  id       String            @id @default(cuid())
  rfqId    String
  rfq      RequestForQuote   @relation(fields: [rfqId], references: [id], onDelete: Cascade)
  vendorId String
  vendor   MarketplaceVendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  userId   String
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Quote Details
  price      Float
  currency   String   @default("USD")
  leadTime   Int // days
  validUntil DateTime

  // Additional Information
  notes       String?
  attachments String[]

  // Terms
  paymentTerms  String?
  shippingTerms String?
  warrantyTerms String?

  // Status
  status QuoteStatus @default(SUBMITTED)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  acceptedAt DateTime?
  rejectedAt DateTime?

  @@index([rfqId])
  @@index([vendorId])
  @@index([status])
}

// Inventory Management
model InventoryLog {
  id        String             @id @default(cuid())
  productId String
  product   MarketplaceProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Movement Details
  movementType InventoryMovementType
  quantity     Int // Positive for additions, negative for subtractions
  newQuantity  Int // Quantity after movement

  // Context
  reason  String?
  orderId String? // If related to an order
  userId  String? // User who made the change

  createdAt DateTime @default(now())

  @@index([productId])
  @@index([movementType])
  @@index([createdAt])
}

// ===================== ENUMS =====================

enum MarketplaceVendorBusinessType {
  MANUFACTURER
  DISTRIBUTOR
  RETAILER
  GROWER
  GENETICS_LAB
  SERVICE_PROVIDER
  OTHER
}

enum MarketplaceVendorStatus {
  PENDING
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum MarketplaceProductCategory {
  LIGHTING
  HVAC
  AUTOMATION
  NUTRIENTS
  MEDIA
  GENETICS
  EQUIPMENT
  SUPPLIES
  SERVICES
  OTHER
}

enum MarketplaceStockStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  DISCONTINUED
  PRE_ORDER
}

enum MarketplaceProductStatus {
  DRAFT
  PENDING_REVIEW
  ACTIVE
  INACTIVE
  DISCONTINUED
}

enum MarketplaceOrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum MarketplaceOrderType {
  STANDARD
  BULK
  CUSTOM
  SUBSCRIPTION
}

enum MarketplacePaymentStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum GeneticsType {
  SEED
  CLONE
  TISSUE_CULTURE
  POLLEN
}

enum LicensingType {
  EXCLUSIVE
  NON_EXCLUSIVE
  WHITE_LABEL
}

enum RFQStatus {
  OPEN
  CLOSED
  AWARDED
  CANCELLED
}

enum QuoteStatus {
  SUBMITTED
  ACCEPTED
  REJECTED
  EXPIRED
}

enum InventoryMovementType {
  INITIAL_STOCK
  PURCHASE
  SALE
  ADJUSTMENT
  DAMAGE
  RETURN
  TRANSFER
}

// ============================================================================
// FINANCIAL AUTOMATION MODELS
// ============================================================================

model RevenueSharingAgreement {
  id          String     @id @default(cuid())
  customerId  String
  customer    User       @relation(fields: [customerId], references: [id])
  facilityId  String
  facility    Facility   @relation(fields: [facilityId], references: [id])
  affiliateId String?
  affiliate   Affiliate? @relation(fields: [affiliateId], references: [id])

  status           AgreementStatus @default(ACTIVE)
  revenueShareRate Float // Percentage (e.g., 20 for 20%)
  minimumThreshold Float           @default(100)

  startDate DateTime
  endDate   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invoices Invoice[]

  // Indexes for revenue sharing queries
  @@index([customerId, status]) // Active agreements by customer
  @@index([facilityId, status]) // Active agreements by facility
  @@index([status, endDate]) // Finding expiring agreements
}

model Invoice {
  id            String                  @id @default(cuid())
  invoiceNumber String                  @unique
  customerId    String
  customer      User                    @relation(fields: [customerId], references: [id])
  agreementId   String
  agreement     RevenueSharingAgreement @relation(fields: [agreementId], references: [id])

  periodStart DateTime
  periodEnd   DateTime

  totalSavings     Float
  revenueShareRate Float
  amountDue        Float

  dueDate DateTime
  status  InvoiceStatus @default(PENDING)

  paidAt               DateTime?
  paymentTransactionId String?

  pdfUrl                      String?
  verificationData            Json?
  weatherNormalizationApplied Boolean @default(false)
  thirdPartyVerified          Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payments             Payment[]
  collectionActivities CollectionActivity[]
  paymentSchedules     PaymentScheduleEntry[]
  collectionCase       CollectionCase?
  AffiliateCommission  AffiliateCommission[]

  // Indexes for invoice queries
  @@index([customerId, status]) // Customer invoice listing
  @@index([status, dueDate]) // Overdue invoice monitoring
  @@index([agreementId]) // Invoices by agreement
  @@index([periodStart, periodEnd]) // Period-based queries
  @@index([createdAt]) // Recent invoices
}

model PaymentScheduleEntry {
  id        String  @id @default(cuid())
  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id])

  scheduledDate DateTime
  status        PaymentScheduleStatus @default(SCHEDULED)
  paymentMethod String
  amount        Float

  retryCount Int     @default(0)
  maxRetries Int     @default(3)
  lastError  String?

  completedAt   DateTime?
  transactionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes for payment scheduling
  @@index([invoiceId]) // Schedules by invoice
  @@index([status, scheduledDate]) // Upcoming scheduled payments
  @@index([scheduledDate]) // Payment calendar queries
}

model Payment {
  id         String  @id @default(cuid())
  invoiceId  String
  invoice    Invoice @relation(fields: [invoiceId], references: [id])
  customerId String
  customer   User    @relation(fields: [customerId], references: [id])

  amount        Float
  paymentMethod String
  transactionId String                  @unique
  status        PaymentProcessingStatus

  processedAt DateTime

  createdAt DateTime @default(now())

  // Indexes for payment queries
  @@index([customerId]) // Customer payment history
  @@index([invoiceId]) // Payments by invoice
  @@index([status]) // Payment status monitoring
  @@index([processedAt]) // Recent payments
  @@index([transactionId]) // Duplicate transaction checks
}

model PaymentMethod {
  id         String @id @default(cuid())
  customerId String
  customer   User   @relation(fields: [customerId], references: [id])

  type      PaymentMethodType
  isDefault Boolean             @default(false)
  status    PaymentMethodStatus @default(ACTIVE)

  // Stripe fields
  stripeCustomerId      String?
  stripePaymentMethodId String?

  // Plaid ACH fields
  plaidAccessToken String? @db.Text
  plaidAccountId   String?

  // Bank details (encrypted)
  bankName        String?
  accountLastFour String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes for payment method queries
  @@index([customerId, status]) // Active payment methods by customer
  @@index([customerId, isDefault]) // Default payment method lookup
  @@index([stripePaymentMethodId]) // Stripe webhook processing
}

model WeatherNormalization {
  id         String   @id @default(cuid())
  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id])

  periodStart DateTime
  periodEnd   DateTime

  originalUsage    Float
  normalizedUsage  Float
  adjustmentFactor Float

  heatingDDActual   Float
  heatingDDBaseline Float
  coolingDDActual   Float
  coolingDDBaseline Float

  confidence Float
  method     String

  createdAt DateTime @default(now())
}

// Weather provider for facility binding
enum WeatherProvider {
  NOAA
  OPEN_METEO
  METEOSTAT
}

// Persisted weather station/provider selection per facility
model FacilityWeather {
  id          String          @id @default(cuid())
  facilityId  String          @unique
  facility    Facility        @relation(fields: [facilityId], references: [id])

  provider    WeatherProvider @default(NOAA)
  stationId   String?
  latitude    Float?
  longitude   Float?

  preferred   Boolean         @default(true)
  lastSync    DateTime?

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

// ERP Connections
enum ERPProvider {
  QUICKBOOKS
  XERO
  NETSUITE
}

model ERPConnection {
  id          String      @id @default(cuid())
  facilityId  String
  facility    Facility    @relation(fields: [facilityId], references: [id])

  provider    ERPProvider
  status      String      @default("DISCONNECTED") // CONNECTED | DISCONNECTED | ERROR
  lastSync    DateTime?

  // OAuth / API tokens (encrypted at rest in provider vaults in future)
  accessToken  String?
  refreshToken String?
  realmId      String?

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([facilityId, provider])
}

// Crop planning & scheduling
model Crop {
  id          String   @id @default(cuid())
  facilityId  String
  facility    Facility @relation(fields: [facilityId], references: [id])

  name        String
  variety     String?
  cycleDays   Int?
  notes       String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  plantings   Planting[]
}

model Planting {
  id          String   @id @default(cuid())
  cropId      String
  crop        Crop     @relation(fields: [cropId], references: [id])

  startDate   DateTime
  expectedHarvestDate DateTime?
  quantity    Int?
  location    String?
  status      String    @default("planned") // planned | active | harvested | cancelled

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  tasks       CropTask[]
}

model CropTask {
  id            String    @id @default(cuid())
  plantingId    String
  planting      Planting  @relation(fields: [plantingId], references: [id])

  title         String
  description   String?
  dueDate       DateTime?
  status        String     @default("pending") // pending | in_progress | done
  assignedToUserId String?

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// ML prediction registry
model ModelRegistry {
  id        String   @id @default(cuid())
  name      String
  version   String
  type      String   // yield | disease | energy | generic
  status    String   @default("ready") // ready | training | deployed | failed
  metrics   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  runs      ModelTrainingRun[]
}

model Dataset {
  id          String   @id @default(cuid())
  name        String
  description String?
  source      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  runs        ModelTrainingRun[]
}

model ModelTrainingRun {
  id         String   @id @default(cuid())
  modelId    String
  model      ModelRegistry @relation(fields: [modelId], references: [id])
  datasetId  String?
  dataset    Dataset?  @relation(fields: [datasetId], references: [id])

  startedAt  DateTime  @default(now())
  finishedAt DateTime?
  status     String    @default("running") // running | completed | failed
  metrics    Json?
}

model ThirdPartyValidation {
  id         String   @id @default(cuid())
  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id])

  validationType ValidationType
  verified       Boolean
  confidence     Float

  discrepancies   String[]
  recommendations String[]

  auditorNotes    String?
  certificationId String?
  dataChecksum    String

  validatedAt DateTime @default(now())
}

model CollectionActivity {
  id         String  @id @default(cuid())
  invoiceId  String
  invoice    Invoice @relation(fields: [invoiceId], references: [id])
  customerId String
  customer   User    @relation(fields: [customerId], references: [id])

  actionType     CollectionActionType
  actionTemplate String
  daysPastDue    Int

  success         Boolean
  responseDetails Json?

  createdAt DateTime @default(now())
}

model CollectionCase {
  id         String  @id @default(cuid())
  invoiceId  String  @unique
  invoice    Invoice @relation(fields: [invoiceId], references: [id])
  customerId String
  customer   User    @relation(fields: [customerId], references: [id])

  amount   Float
  status   CaseStatus   @default(OPEN)
  priority CasePriority @default(MEDIUM)

  assignedTo String

  resolvedAt     DateTime?
  resolutionType String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AffiliateCommission {
  id          String    @id @default(cuid())
  affiliateId String
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])
  invoiceId   String
  invoice     Invoice   @relation(fields: [invoiceId], references: [id])
  customerId  String
  customer    User      @relation(fields: [customerId], references: [id])

  amount Float
  rate   Float
  tier   String

  status        CommissionStatus @default(PENDING)
  payoutDate    DateTime
  paidAt        DateTime?
  transactionId String?

  createdAt DateTime @default(now())
}

model FacilityTrustScore {
  id         String   @id @default(cuid())
  facilityId String   @unique
  facility   Facility @relation(fields: [facilityId], references: [id])

  score           Float // 0-1
  lastValidation  DateTime
  validationCount Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Financial Automation Enums
enum AgreementStatus {
  ACTIVE
  PAUSED
  TERMINATED
  EXPIRED
}

enum InvoiceStatus {
  DRAFT
  PENDING
  OVERDUE
  PAID
  CANCELLED
}

enum PaymentScheduleStatus {
  SCHEDULED
  RETRY
  COMPLETED
  FAILED
}

enum PaymentProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethodType {
  CARD
  ACH
  WIRE
}

enum PaymentMethodStatus {
  ACTIVE
  EXPIRED
  SUSPENDED
}

enum ConnectionStatus {
  PENDING_AUTH
  CONNECTED
  ACTIVE
  ERROR
  DISCONNECTED
}

enum ValidationType {
  AUTOMATED
  MANUAL
  CERTIFIED
}

enum CollectionActionType {
  EMAIL
  SMS
  CALL
  LEGAL
}

enum CaseStatus {
  OPEN
  RESOLVED
  ESCALATED
  LEGAL
}

enum CasePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum CommissionStatus {
  PENDING
  APPROVED
  PAID
  CANCELLED
}

// Market Data & Benchmarking Models
model MarketData {
  id         String   @id @default(cuid())
  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id])

  // Product Details
  cropType        String
  strain          String?
  productCategory String // flower, trim, extract, etc.
  quality         String // A, B, C grade

  // Transaction Data
  pricePerUnit Float
  unitType     String // lb, kg, gram, etc.
  quantity     Float
  totalRevenue Float

  // Market Context
  buyerType     String? // dispensary, processor, wholesale
  buyerLocation String? // city/state
  contractType  String? // spot, contract, futures

  // Metadata
  harvestDate DateTime?
  saleDate    DateTime
  reportedBy  String
  reporter    User      @relation(fields: [reportedBy], references: [id])
  verified    Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([facilityId, cropType, saleDate])
  @@index([cropType, quality, saleDate])
}

model BenchmarkReport {
  id         String   @id @default(cuid())
  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id])

  // Report Details
  reportType String // energy, yield, quality, financial
  period     String // monthly, quarterly, annual
  startDate  DateTime
  endDate    DateTime

  // Metrics
  metrics     Json // Flexible JSON for various metric types
  rankings    Json // Facility rankings in different categories
  comparisons Json // Peer group comparisons

  // Access Control
  accessTier String // basic, pro, enterprise
  isPublic   Boolean @default(false)

  createdAt DateTime @default(now())

  @@index([facilityId, reportType, startDate])
  @@index([reportType, period, createdAt])
}

model BenchmarkSubscription {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Subscription Details
  tier     String // basic, pro, enterprise
  status   String // active, cancelled, expired
  features Json // Array of enabled features

  // Billing
  monthlyPrice    Float
  billingCycle    String // monthly, annual
  nextBillingDate DateTime?

  // Usage
  reportsAccessed Int       @default(0)
  lastAccessedAt  DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?

  @@index([userId, status])
}

model IndustryBenchmark {
  id String @id @default(cuid())

  // Benchmark Details
  metricType   String // yield_per_sqft, energy_per_gram, etc.
  cropType     String
  facilityType String // indoor, greenhouse, vertical
  region       String? // geographic region

  // Statistical Data
  sampleSize   Int
  average      Float
  median       Float
  percentile25 Float
  percentile75 Float
  percentile90 Float
  standardDev  Float

  // Time Period
  periodStart DateTime
  periodEnd   DateTime

  // Metadata
  confidence  Float // 0-1 confidence score
  lastUpdated DateTime @default(now())

  @@unique([metricType, cropType, facilityType, region, periodStart])
  @@index([metricType, cropType, lastUpdated])
}

model DataContribution {
  id         String   @id @default(cuid())
  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id])

  // Contribution Details
  dataType     String // market_price, yield_data, energy_data
  recordCount  Int
  qualityScore Float // 0-1 data quality

  // Rewards
  creditsEarned   Int      @default(0)
  reportsUnlocked String[] // Array of report IDs unlocked

  createdAt DateTime @default(now())

  @@index([facilityId, dataType, createdAt])
}

// Enhanced Mobile Authentication Models

model MobileSession {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Device Information
  deviceId    String
  fingerprint String
  platform    String // ios, android, web
  deviceModel String?
  osVersion   String?
  appVersion  String

  // Session Security
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  lastActiveAt DateTime @default(now())

  // Session State
  isRevoked    Boolean   @default(false)
  revokedAt    DateTime?
  revokeReason String?

  @@unique([userId, deviceId, fingerprint])
  @@index([userId, expiresAt])
  @@index([deviceId])
  @@index([lastActiveAt])
}

model ApiKey {
  id      String @id @default(cuid())
  name    String
  keyHash String @unique // SHA256 hash of the actual key
  prefix  String // First 8 chars for identification

  // Ownership
  userId     String?
  user       User?     @relation(fields: [userId], references: [id])
  facilityId String?
  facility   Facility? @relation(fields: [facilityId], references: [id])

  // Permissions
  permissions String[] // Array of allowed permissions
  scopes      String[] // API scopes (read, write, admin)

  // Usage & Security
  lastUsedAt  DateTime?
  usageCount  Int       @default(0)
  rateLimit   Int? // Requests per hour
  ipWhitelist String[] // Allowed IP addresses

  // Lifecycle
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  expiresAt    DateTime?
  revokedAt    DateTime?
  revokeReason String?

  @@index([keyHash])
  @@index([userId])
  @@index([facilityId])
  @@index([isActive, expiresAt])
}

model WebhookEvent {
  id          String   @id @default(cuid())
  eventId     String   @unique // Stripe event ID for idempotency
  eventType   String // checkout.session.completed, etc.
  status      String // success, failed
  error       String? // Error details if failed
  processedAt DateTime @default(now())

  @@index([eventId])
  @@index([eventType, processedAt])
  @@index([status, processedAt])
}

// Update Management Models

model SystemUpdate {
  id                String    @id @default(cuid())
  version           String    @unique
  title             String
  description       String
  type              String // feature, improvement, bugfix, security, breaking
  severity          String // minor, major, critical
  affectedPlans     String[] // Array of plan IDs affected
  rolloutPercentage Int       @default(100)
  scheduledFor      DateTime
  releasedAt        DateTime?
  features          Json? // { added: [], changed: [], deprecated: [], removed: [] }

  // Relationships
  affectedUsers UserUpdateStatus[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([version])
  @@index([releasedAt])
  @@index([type, severity])
}

model FeatureFlag {
  id                String    @id @default(cuid())
  name              String    @unique
  description       String
  enabled           Boolean   @default(true)
  rolloutPercentage Int       @default(100)
  allowedPlans      String[] // Plans that have access
  targetUsers       String[] // Specific user IDs (for beta testing)
  expiresAt         DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([enabled, rolloutPercentage])
}

model UserFeatureOverride {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  feature   String
  enabled   Boolean
  reason    String // grandfathered, beta_tester, downgrade_protection, etc.
  expiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, feature])
  @@index([userId])
  @@index([feature, enabled])
}

model UserUpdateStatus {
  id       String       @id @default(cuid())
  userId   String
  user     User         @relation(fields: [userId], references: [id])
  updateId String
  update   SystemUpdate @relation(fields: [updateId], references: [id])

  // Status tracking
  notified Boolean @default(false)
  viewed   Boolean @default(false)

  notifiedAt DateTime?
  viewedAt   DateTime?
  createdAt  DateTime  @default(now())

  @@unique([userId, updateId])
  @@index([userId])
  @@index([updateId])
}

model PriceProtection {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  oldPrice       Float // Price in dollars
  newPrice       Float
  protectedUntil DateTime // Keep old price until this date

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([protectedUntil])
}

// Expert Consultation System Schema

model Expert {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  // Profile Information
  displayName String
  title       String
  bio         String  @db.Text
  photoUrl    String?
  linkedinUrl String?
  websiteUrl  String?

  // Expertise Areas
  specialties     String[] // growing, packaging, engineering, IPM, sales, compliance, etc.
  certifications  String[]
  yearsExperience Int

  // Pricing
  hourlyRate   Float  @default(200) // in USD
  minimumHours Float  @default(1) // minimum booking duration
  currency     String @default("USD")

  // Availability
  timezone       String @default("America/Los_Angeles")
  availableDays  Int[] // 0-6 (Sunday to Saturday)
  availableHours Json // { start: "09:00", end: "17:00" }
  bufferTime     Int    @default(15) // minutes between sessions

  // Settings
  autoApprove       Boolean @default(false) // auto-approve bookings
  videoPreference   String  @default("platform") // platform, zoom, google_meet
  cancellationHours Int     @default(24) // hours notice required

  // Stats
  totalSessions Int    @default(0)
  totalEarnings Float  @default(0)
  averageRating Float?
  responseTime  Int? // average response time in hours

  // Status
  status           ExpertStatus @default(PENDING)
  verifiedAt       DateTime?
  suspendedAt      DateTime?
  suspensionReason String?

  // Relationships
  consultations Consultation[]
  reviews       ExpertReview[]
  availability  ExpertAvailability[]
  payouts       ExpertPayout[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([specialties])
}

enum ExpertStatus {
  PENDING
  ACTIVE
  SUSPENDED
  INACTIVE
}

model Consultation {
  id String @id @default(cuid())

  // Participants
  expertId String
  expert   Expert @relation(fields: [expertId], references: [id])
  clientId String
  client   User   @relation("ClientConsultations", fields: [clientId], references: [id])

  // Scheduling
  scheduledStart DateTime
  scheduledEnd   DateTime
  duration       Int // in minutes
  timezone       String

  // Meeting Details
  title            String
  description      String?  @db.Text
  objectives       String[] // what client wants to achieve
  preparationNotes String?  @db.Text

  // Status
  status ConsultationStatus @default(REQUESTED)

  // Meeting Info
  meetingUrl   String? // platform video call URL
  meetingId    String? // internal meeting ID
  recordingUrl String? // if recording enabled

  // Financial
  hourlyRate     Float
  totalAmount    Float
  platformFee    Float // 10% of total
  expertEarnings Float // 90% of total
  currency       String @default("USD")

  // Payment
  paymentStatus   ConsultationPaymentStatus @default(PENDING)
  paymentIntentId String? // Stripe payment intent
  paidAt          DateTime?
  refundedAt      DateTime?
  refundReason    String?

  // Post-session
  actualStart   DateTime?
  actualEnd     DateTime?
  notes         String?                  @db.Text // expert's notes
  followUpItems String[] // action items
  attachments   ConsultationAttachment[]

  // Cancellation
  cancelledAt        DateTime?
  cancelledBy        String? // userId who cancelled
  cancellationReason String?

  // Anti-disintermediation
  platformCallUsed Boolean @default(false)
  externalContact  Boolean @default(false) // flag if external contact detected
  warningsSent     Int     @default(0)

  // Relationships
  messages ConsultationMessage[]
  review   ExpertReview?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([expertId, scheduledStart])
  @@index([clientId, scheduledStart])
  @@index([status])
  @@index([paymentStatus])
}

enum ConsultationStatus {
  REQUESTED
  APPROVED
  REJECTED
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum ConsultationPaymentStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  REFUNDED
  FAILED
}

model ConsultationMessage {
  id             String       @id @default(cuid())
  consultationId String
  consultation   Consultation @relation(fields: [consultationId], references: [id])

  senderId String
  sender   User   @relation(fields: [senderId], references: [id])

  content String @db.Text

  // Anti-disintermediation monitoring
  flaggedContent Boolean @default(false)
  flagReason     String? // "phone_number", "email", "external_link", etc.

  attachments MessageAttachment[]

  createdAt DateTime @default(now())

  @@index([consultationId])
}

model ExpertReview {
  id             String       @id @default(cuid())
  consultationId String       @unique
  consultation   Consultation @relation(fields: [consultationId], references: [id])
  expertId       String
  expert         Expert       @relation(fields: [expertId], references: [id])
  clientId       String
  client         User         @relation(fields: [clientId], references: [id])

  rating  Int // 1-5 stars
  comment String? @db.Text

  // Specific ratings
  knowledge       Int? // 1-5
  communication   Int? // 1-5
  professionalism Int? // 1-5
  value           Int? // 1-5

  // Expert response
  expertResponse String?   @db.Text
  respondedAt    DateTime?

  isPublic Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([expertId])
  @@index([rating])
}

model ExpertAvailability {
  id       String @id @default(cuid())
  expertId String
  expert   Expert @relation(fields: [expertId], references: [id])

  date      DateTime @db.Date
  startTime String // "09:00"
  endTime   String // "17:00"

  isAvailable Boolean @default(true)
  reason      String? // if not available

  createdAt DateTime @default(now())

  @@unique([expertId, date])
  @@index([expertId, date])
}

model ExpertPayout {
  id       String @id @default(cuid())
  expertId String
  expert   Expert @relation(fields: [expertId], references: [id])

  amount   Float
  currency String @default("USD")

  // Stripe Connect
  transferId    String?
  destinationId String? // Stripe Connect account

  status ExpertPayoutStatus @default(PENDING)

  // Period
  periodStart     DateTime
  periodEnd       DateTime
  consultationIds String[]

  processedAt   DateTime?
  failedAt      DateTime?
  failureReason String?

  createdAt DateTime @default(now())

  @@index([expertId])
  @@index([status])
}

enum ExpertPayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model ConsultationAttachment {
  id             String       @id @default(cuid())
  consultationId String
  consultation   Consultation @relation(fields: [consultationId], references: [id])

  fileName String
  fileUrl  String
  fileSize Int
  mimeType String

  uploadedBy String
  uploader   User   @relation(fields: [uploadedBy], references: [id])

  createdAt DateTime @default(now())
}

model MessageAttachment {
  id        String              @id @default(cuid())
  messageId String
  message   ConsultationMessage @relation(fields: [messageId], references: [id])

  fileName String
  fileUrl  String
  fileSize Int
  mimeType String

  createdAt DateTime @default(now())
}

// Platform Features to Prevent Disintermediation
model PlatformFeature {
  id          String @id @default(cuid())
  name        String
  description String

  // Features that add value to keep users on platform
  features String[] // ["video_recording", "automated_scheduling", "invoicing", "contracts", "compliance_tracking"]
}

// Terms violation tracking
model TermsViolation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  type        String // "contact_sharing", "off_platform_solicitation", etc.
  description String
  severity    String // "warning", "suspension", "ban"

  actionTaken String?

  createdAt DateTime @default(now())

  @@index([userId])
}

// Lighting Device Management
model LightingDevice {
  id         String  @id @default(cuid())
  deviceId   String  @unique // Protocol-specific device ID
  zoneId     String? // Optional zone assignment
  facilityId String? // Optional facility assignment

  protocol     String // "HLP", "Modbus", "DALI", etc.
  manufacturer String
  model        String
  serialNumber String?

  ipAddress String?
  port      Int?

  status   String    @default("offline") // "online", "offline", "error"
  lastSeen DateTime?

  capabilities Json? // Device-specific capabilities
  metadata     Json? // Additional device data

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([zoneId])
  @@index([facilityId])
  @@index([protocol])
  @@index([status])
}

// Lighting Schedule Management
model LightingSchedule {
  id      String  @id @default(cuid())
  zoneId  String
  name    String
  enabled Boolean @default(true)

  data Json // Full schedule configuration

  createdBy    String
  lastExecuted DateTime?
  deletedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User                   @relation(fields: [createdBy], references: [id])
  executionLogs ScheduleExecutionLog[]

  @@index([zoneId])
  @@index([enabled])
  @@index([deletedAt])
}

model ScheduleExecutionLog {
  id         String @id @default(cuid())
  scheduleId String

  executedAt DateTime
  success    Boolean

  spectrum       Json? // Applied spectrum values
  intensity      Float? // Applied intensity
  activeSetpoint String? // Which setpoint was active
  errorMessage   String? // Error details if failed

  schedule LightingSchedule @relation(fields: [scheduleId], references: [id])

  @@index([scheduleId])
  @@index([executedAt])
  @@index([success])
}

// Safety and Limits
model SafetyLimit {
  id         String  @id @default(cuid())
  facilityId String?
  zoneId     String?

  limitType String // "power", "temperature", "ppfd", etc.
  maxValue  Float
  unit      String

  action   String // "alert", "reduce", "shutdown"
  priority Int    @default(0)

  enabled Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([facilityId])
  @@index([zoneId])
  @@index([limitType])
}

// System Alerts for safety monitoring
model SystemAlert {
  id           String  @id @default(cuid())
  type         String // "safety_violation", "emergency_shutdown", etc.
  severity     String // "warning", "critical", "emergency"
  source       String // "SafetyMonitor", "ScheduleExecutor", etc.
  message      String
  metadata     Json? // Additional event data
  acknowledged Boolean @default(false)

  createdAt      DateTime  @default(now())
  acknowledgedAt DateTime?
  acknowledgedBy String?

  @@index([type])
  @@index([severity])
  @@index([acknowledged])
  @@index([createdAt])
}

model SavedDesign {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id])

  // Design data
  data      Json // Stores the complete design configuration
  thumbnail String? // URL to thumbnail image

  // Metadata
  tags     String[]
  isPublic Boolean  @default(false)
  views    Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([projectId])
}

model CadImport {
  id            String   @id @default(cuid())
  userId        String
  fileName      String
  fileSize      Int // in bytes
  format        String // dwg, rvt, ifc, etc.
  autodeskUrn   String? // Autodesk URN after conversion
  autodeskJobId String? // Autodesk job ID for tracking
  status        String // pending, processing, completed, failed
  complexity    String // simple or complex
  tokensUsed    Float // Autodesk tokens consumed
  errorMessage  String? // Error details if failed
  metadata      Json? // Additional metadata (dimensions, rooms, etc.)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId, createdAt])
  @@index([status])
  @@index([format])
}

// Enhanced Affiliate Program Enums
enum AffiliateBonusType {
  SIGNUP // $500 bonus for first 5 referrals
  TIER_UPGRADE // $1,000 for Silver, $5,000 for Platinum
  MONTHLY_WINNER // Monthly contest prizes
  QUARTERLY_BONUS // Quarterly performance bonuses
  SPECIAL_PROMO // One-time promotional bonuses
  REVENUE_SHARE // Enterprise deal revenue sharing
}

enum BonusStatus {
  PENDING
  APPROVED
  PAID
  CANCELLED
}

enum LeaderboardType {
  MONTHLY_CLICKS
  MONTHLY_CONVERSIONS
  MONTHLY_REVENUE
  QUARTERLY_PERFORMANCE
  ANNUAL_TOP_PERFORMER
}

enum SalesAssetType {
  BANNER // Display banners
  EMAIL_TEMPLATE // Email marketing templates
  LANDING_PAGE // Custom landing pages
  SALES_DECK // PowerPoint presentations
  CASE_STUDY // Customer success stories
  VIDEO // Promotional videos
  CALCULATOR // ROI calculators
  WEBINAR // Recorded webinars
  WHITEPAPER // Technical documents
}

// Enhanced ML Data Import Models

model DataImport {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  facilityId String?
  facility   Facility? @relation(fields: [facilityId], references: [id])

  // File Information
  fileName     String
  fileType     String // csv, xlsx, json
  fileSize     Int
  sourceSystem String? // "excel_export", "sensor_logs", "manual_entry"

  // Processing Status
  status           ImportStatus @default(UPLOADED)
  progress         Int          @default(0)
  totalRecords     Int?
  processedRecords Int?
  validRecords     Int?
  failedRecords    Int?

  // Field Mapping & Validation
  fieldMappings   Json? // AI-interpreted field mappings
  aiConfidence    Float? // 0-1 confidence in AI interpretation
  dataPreview     Json? // First few rows for user review
  validationRules Json? // Custom validation rules

  // Processing Results
  errors   String[]
  warnings String[]
  insights DataInsight[]
  features MLFeature[]

  // Metadata
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())

  @@index([userId, status, createdAt])
  @@index([facilityId, status])
}

model DataInsight {
  id       String     @id @default(cuid())
  importId String
  import   DataImport @relation(fields: [importId], references: [id], onDelete: Cascade)

  // Insight Classification
  insightType InsightType
  category    InsightCategory
  priority    InsightPriority @default(MEDIUM)

  // Content
  title       String
  description String
  confidence  Float // 0-1 confidence score

  // Impact Assessment
  impactMetric String? // yield, quality, efficiency, cost
  impactValue  Float? // quantified impact
  impactUnit   String? // %, $, kg/m2, etc.

  // Data Context
  dataPoints     Int
  dateRangeStart DateTime?
  dateRangeEnd   DateTime?
  statistics     Json? // statistical analysis results

  // Recommendations
  recommendations String[]
  actionItems     String[]

  // User Interaction
  acknowledged Boolean @default(false)
  implemented  Boolean @default(false)
  userNotes    String?

  createdAt DateTime @default(now())

  @@index([importId, insightType])
  @@index([category, priority, acknowledged])
}

model MLFeature {
  id       String     @id @default(cuid())
  importId String
  import   DataImport @relation(fields: [importId], references: [id], onDelete: Cascade)

  // Feature Definition
  featureName String
  featureType FeatureType
  dataType    String // numeric, categorical, boolean, datetime

  // Source Information
  sourceColumns   String[] // Original column names that created this feature
  transformation  String? // Description of transformation applied
  engineeringType String? // rolling_avg, lag, interaction, pca_component

  // Statistical Properties
  minValue       Float?
  maxValue       Float?
  meanValue      Float?
  stdDeviation   Float?
  nullPercentage Float?
  uniqueValues   Int?

  // Feature Quality
  importance   Float? // Feature importance score
  correlation  Json? // Correlations with other features
  qualityScore Float? // Overall feature quality (0-1)

  // ML Readiness
  readyForML    Boolean @default(false)
  preprocessing Json? // Required preprocessing steps

  createdAt DateTime @default(now())

  @@index([importId, featureType])
  @@index([featureName, readyForML])
}

model MLDataset {
  id          String  @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User    @relation(fields: [userId], references: [id])

  // Dataset Composition
  sourceImports  String[] // Array of DataImport IDs
  features       String[] // Array of MLFeature IDs
  targetVariable String? // Target variable for supervised learning

  // Dataset Properties
  totalRecords    Int
  trainingSplit   Float @default(0.7)
  validationSplit Float @default(0.15)
  testSplit       Float @default(0.15)

  // Quality Assessment
  dataQuality  Float? // Overall data quality score
  completeness Float? // Percentage of non-null values
  consistency  Float? // Data consistency score

  // ML Metadata
  useCase               MLUseCase
  modelType             String? // regression, classification, clustering
  preprocessingPipeline Json?

  // Version Control
  version         String  @default("1.0")
  parentDatasetId String?
  isActive        Boolean @default(true)

  // Usage Tracking
  modelsTrainedCount Int       @default(0)
  lastUsed           DateTime?

  models MLModel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, useCase, isActive])
  @@index([name, version])
}

model MLModel {
  id        String    @id @default(cuid())
  name      String
  version   String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  datasetId String
  dataset   MLDataset @relation(fields: [datasetId], references: [id])

  // Model Configuration
  modelType       String // linear_regression, random_forest, neural_network
  hyperparameters Json
  features        String[] // Selected features for this model

  // Training Results
  trainingStatus    TrainingStatus @default(PENDING)
  metrics           Json? // accuracy, rmse, r2, etc.
  crossValidation   Json? // CV scores and statistics
  featureImportance Json? // Feature importance rankings

  // Model Artifacts
  modelData Json? // Serialized model (for small models)
  modelPath String? // Path to model file (for large models)

  // Performance Tracking
  productionAccuracy Float?
  driftScore         Float? // Model drift detection score
  retrainingNeeded   Boolean @default(false)

  // Deployment
  isDeployed      Boolean   @default(false)
  deployedAt      DateTime?
  predictionCount Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, modelType, isDeployed])
  @@index([datasetId, trainingStatus])
}

// Enums for ML Data Import

enum ImportStatus {
  UPLOADED
  ANALYZING
  MAPPING_FIELDS
  VALIDATING
  PROCESSING
  EXTRACTING_FEATURES
  COMPLETED
  FAILED
}

enum InsightType {
  PATTERN_DETECTED
  ANOMALY_FOUND
  CORRELATION_DISCOVERED
  OPTIMIZATION_OPPORTUNITY
  DATA_QUALITY_ISSUE
  SEASONAL_TREND
  EFFICIENCY_GAIN
  YIELD_PREDICTION
}

enum InsightCategory {
  ENVIRONMENT
  YIELD
  QUALITY
  EFFICIENCY
  COST
  TIMING
  NUTRIENTS
  LIGHTING
  IRRIGATION
}

enum InsightPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum FeatureType {
  ENVIRONMENTAL
  NUTRITIONAL
  LIGHTING
  TEMPORAL
  DERIVED
  INTERACTION
  STATISTICAL
}

enum MLUseCase {
  YIELD_PREDICTION
  QUALITY_OPTIMIZATION
  ENVIRONMENT_CONTROL
  DEFECT_DETECTION
  HARVEST_TIMING
  RESOURCE_OPTIMIZATION
  ANOMALY_DETECTION
}

enum TrainingStatus {
  PENDING
  PREPROCESSING
  TRAINING
  VALIDATING
  COMPLETED
  FAILED
}

// ====================================================================
// RECIPE MARKETPLACE MODELS
// ====================================================================

model CultivationRecipe {
  id          String  @id @default(cuid())
  name        String
  description String?
  creatorId   String

  // Recipe categorization
  strainName String
  strainType StrainType
  genetics   Json? // Parent strains, lineage info
  difficulty DifficultyLevel @default(INTERMEDIATE)

  // Core recipe data (JSON for flexibility)
  lighting    Json // Week-by-week spectrum protocols
  nutrients   Json // Complete nutrient schedules
  environment Json // Environmental parameters
  training    Json // Cultivation techniques (LST, SCROG, etc.)

  // Harvest & post-processing
  harvestTiming Json // Trichome ratios, timing indicators
  drying        Json // Drying protocol for terpene preservation
  curing        Json // Curing specifications

  // Verified results
  results Json // Lab-verified outcomes (THC, terpenes, yield)

  // Commercial information
  pricing Json // License fees, royalties, usage rights

  // Quality assurance
  verification Json // Validation status, peer reviews
  labResults   Json? // COA uploads and test results

  // Metadata
  isPublic   Boolean  @default(false)
  isVerified Boolean  @default(false)
  tags       String[] // Searchable tags

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  creator      User                @relation("RecipeCreator", fields: [creatorId], references: [id])
  purchases    RecipePurchase[]
  executions   RecipeExecution[]
  reviews      RecipeReview[]
  favorites    RecipeFavorite[]
  correlations RecipeCorrelation[]

  @@index([strainName, strainType])
  @@index([creatorId])
  @@index([isPublic, isVerified])
}

model RecipePurchase {
  id       String @id @default(cuid())
  recipeId String
  buyerId  String

  // Purchase details
  purchaseType PurchaseType
  amount       Float // Purchase price
  currency     String       @default("USD")

  // Licensing terms
  usageRights UsageRights
  territory   String[] // Allowed regions
  exclusive   Boolean     @default(false)

  // Stripe integration
  stripePaymentIntentId String?

  purchasedAt DateTime @default(now())

  // Relationships
  recipe     CultivationRecipe @relation(fields: [recipeId], references: [id])
  buyer      User              @relation("RecipePurchases", fields: [buyerId], references: [id])
  executions RecipeExecution[]

  @@index([buyerId])
  @@index([recipeId])
}

model RecipeExecution {
  id         String  @id @default(cuid())
  recipeId   String
  purchaseId String? // If purchased recipe
  executorId String

  // Execution tracking
  status              ExecutionStatus @default(PLANNING)
  startDate           DateTime
  expectedHarvestDate DateTime?
  actualHarvestDate   DateTime?

  // Adherence tracking
  adherenceScore Float? // 0-100% how closely following recipe
  deviations     Json? // Tracked deviations from protocol

  // Environmental data
  environmentalLogs Json? // Real-time sensor data

  // Results
  actualResults Json? // Actual yield, quality results
  labResultsUrl String? // Link to COA

  // Performance metrics
  yieldVariance   Float? // vs predicted yield
  qualityVariance Float? // vs predicted quality

  // Notes and feedback
  notes             String?
  feedbackToCreator String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  recipe   CultivationRecipe @relation(fields: [recipeId], references: [id])
  purchase RecipePurchase?   @relation(fields: [purchaseId], references: [id])
  executor User              @relation("RecipeExecutions", fields: [executorId], references: [id])
  reviews  RecipeReview[]

  @@index([executorId])
  @@index([recipeId])
  @@index([status])
}

model RecipeReview {
  id          String  @id @default(cuid())
  recipeId    String
  reviewerId  String
  executionId String? // Optional link to execution

  // Review content
  rating  Int // 1-5 stars
  title   String?
  content String

  // Specific ratings
  yieldRating   Int? // 1-5 for yield performance
  qualityRating Int? // 1-5 for quality results
  clarityRating Int? // 1-5 for recipe clarity

  // Verification
  verified Boolean @default(false)
  helpful  Int     @default(0) // Helpful vote count

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  recipe    CultivationRecipe @relation(fields: [recipeId], references: [id])
  reviewer  User              @relation("RecipeReviews", fields: [reviewerId], references: [id])
  execution RecipeExecution?  @relation(fields: [executionId], references: [id])

  @@unique([recipeId, reviewerId]) // One review per user per recipe
  @@index([recipeId])
  @@index([rating])
}

model RecipeFavorite {
  id        String   @id @default(cuid())
  recipeId  String
  userId    String
  createdAt DateTime @default(now())

  // Relationships
  recipe CultivationRecipe @relation(fields: [recipeId], references: [id])
  user   User              @relation("RecipeFavorites", fields: [userId], references: [id])

  @@unique([recipeId, userId])
  @@index([userId])
}

model RecipeCorrelation {
  id       String @id @default(cuid())
  recipeId String

  // Correlation data
  correlationType CorrelationType
  parameter       String // What was correlated (e.g., "red_light_percentage")
  outcome         String // What it affects (e.g., "thc_percentage")
  correlation     Float // Correlation coefficient (-1 to 1)
  confidence      Float // Statistical confidence (0-1)
  sampleSize      Int // Number of data points

  // Metadata
  discoveredAt DateTime  @default(now())
  validatedAt  DateTime?

  // Relationships
  recipe CultivationRecipe @relation(fields: [recipeId], references: [id])

  @@index([recipeId])
  @@index([correlationType])
}

// ====================================================================
// RECIPE MARKETPLACE ENUMS
// ====================================================================

// Note: StrainType enum already defined above with additional values
// Using the existing enum definition

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum PurchaseType {
  ONE_TIME_LICENSE
  ROYALTY_BASED
  SUBSCRIPTION
  CUSTOM
}

enum UsageRights {
  PERSONAL
  COMMERCIAL
  UNLIMITED
  RESEARCH_ONLY
}

enum ExecutionStatus {
  PLANNING
  GERMINATION
  SEEDLING
  VEGETATIVE
  PRE_FLOWER
  FLOWERING
  HARVEST
  DRYING
  CURING
  COMPLETED
  ABANDONED
}

enum CorrelationType {
  SPECTRUM_CANNABINOID
  SPECTRUM_TERPENE
  ENVIRONMENT_YIELD
  ENVIRONMENT_QUALITY
  NUTRIENT_GROWTH
  TIMING_OUTCOME
  TRAINING_YIELD
  MULTI_VARIABLE
}

// ====================================================================
// SCHEDULED ACTIONS MODEL
// ====================================================================

model ScheduledAction {
  id           String                @id @default(cuid())
  userId       String
  actionType   ScheduledActionType
  scheduledFor DateTime
  status       ScheduledActionStatus @default(PENDING)
  metadata     Json?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  canceledAt   DateTime?
  executedAt   DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([scheduledFor])
  @@index([status])
  @@index([actionType])
}

enum ScheduledActionType {
  SUBSCRIPTION_DOWNGRADE
  SUBSCRIPTION_CANCEL
  PAYMENT_RETRY
  NOTIFICATION_SEND
  ACCOUNT_SUSPENSION
  DATA_CLEANUP
}

enum ScheduledActionStatus {
  PENDING
  EXECUTED
  CANCELLED
  FAILED
}

// ====================================================================
// ENHANCED PEST IDENTIFICATION MODEL
// ====================================================================

model PestAnalysis {
  id             String   @id @default(cuid())
  analysisId     String   @unique
  facilityId     String?
  zoneId         String?
  imageData      String? // Thumbnail or reference
  identification Json // Full identification results
  confidence     Float
  processingTime Int // milliseconds
  requiresReview Boolean  @default(false)
  expertReviewed Boolean  @default(false)
  expertFeedback Json? // Expert corrections/validations
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Optional facility relation
  facility Facility? @relation(fields: [facilityId], references: [id], onDelete: Cascade)

  @@index([facilityId])
  @@index([confidence])
  @@index([requiresReview])
  @@index([createdAt])
}

// Machine Learning Models
model MLPrediction {
  id             String   @id @default(cuid())
  facilityId     String
  predictionType String
  inputs         Json
  prediction     Json
  actual         Json?
  feedback       Json?
  accuracy       Float?
  modelVersion   String
  timestamp      DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([facilityId])
  @@index([predictionType])
  @@index([timestamp])
  @@index([accuracy])
}

model MLModelVersion {
  id                 String   @id @default(cuid())
  modelType          String
  version            String
  accuracy           Float
  trainingDataPoints Int
  improvements       Json?
  releasedAt         DateTime @default(now())
  isActive           Boolean  @default(false)

  @@index([modelType])
  @@index([isActive])
}

model MLLearningEvent {
  id             String   @id @default(cuid())
  eventType      String
  facilityId     String?
  dataPoints     Int
  modelType      String
  beforeAccuracy Float?
  afterAccuracy  Float?
  timestamp      DateTime @default(now())

  @@index([facilityId])
  @@index([modelType])
}

model UsageRecord {
  id           String   @id @default(cuid())
  userId       String
  eventType    String
  eventData    Json     @default("{}")
  facilityId   String?
  timestamp    DateTime @default(now())
  billingMonth String // Format: YYYY-MM for easier querying

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  facility Facility? @relation(fields: [facilityId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([eventType])
  @@index([billingMonth])
  @@index([timestamp])
  @@index([userId, billingMonth])
}

// GMP Compliance Models

enum GMPDocumentType {
  SOP
  BATCH_RECORD
  SPECIFICATION
  PROTOCOL
  REPORT
  POLICY
  FORM
}

enum GMPDocumentStatus {
  DRAFT
  REVIEW
  APPROVED
  EFFECTIVE
  OBSOLETE
}

enum GMPSignatureType {
  AUTHOR
  REVIEWER
  APPROVER
  QA
  QU
}

enum GMPBatchStatus {
  IN_PROGRESS
  COMPLETED
  RELEASED
  REJECTED
  ON_HOLD
}

enum DeviationSeverity {
  MINOR
  MAJOR
  CRITICAL
}

enum DeviationStatus {
  OPEN
  UNDER_INVESTIGATION
  CAPA_REQUIRED
  CLOSED
}

model GMPDocument {
  id             String            @id @default(cuid())
  documentNumber String            @unique
  title          String
  version        String            @default("1.0")
  type           GMPDocumentType
  status         GMPDocumentStatus @default(DRAFT)
  effectiveDate  DateTime?
  expiryDate     DateTime?
  content        String
  facilityId     String
  authorId       String
  reviewerId     String?
  approverId     String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  facility    Facility              @relation(fields: [facilityId], references: [id])
  author      User                  @relation("GMPDocumentAuthor", fields: [authorId], references: [id])
  reviewer    User?                 @relation("GMPDocumentReviewer", fields: [reviewerId], references: [id])
  approver    User?                 @relation("GMPDocumentApprover", fields: [approverId], references: [id])
  signatures  ElectronicSignature[]
  attachments DocumentAttachment[]
  auditTrail  AuditTrailEntry[]

  @@index([facilityId])
  @@index([status])
  @@index([type])
}

model ElectronicSignature {
  id            String           @id @default(cuid())
  documentId    String
  userId        String
  signatureType GMPSignatureType
  timestamp     DateTime         @default(now())
  ipAddress     String
  userAgent     String
  biometricData Json?
  reason        String?
  isValid       Boolean          @default(true)

  document GMPDocument @relation(fields: [documentId], references: [id])
  user     User        @relation("ElectronicSignature", fields: [userId], references: [id])

  @@index([documentId])
  @@index([userId])
}

model DocumentAttachment {
  id           String   @id @default(cuid())
  documentId   String
  fileName     String
  fileSize     Int
  fileType     String
  filePath     String
  checksum     String
  uploadedAt   DateTime @default(now())
  uploadedById String

  document   GMPDocument @relation(fields: [documentId], references: [id])
  uploadedBy User        @relation("DocumentAttachment", fields: [uploadedById], references: [id])

  @@index([documentId])
}

model AuditTrailEntry {
  id            String   @id @default(cuid())
  documentId    String
  userId        String
  action        String
  previousValue Json?
  newValue      Json?
  timestamp     DateTime @default(now())
  ipAddress     String
  userAgent     String

  document GMPDocument @relation(fields: [documentId], references: [id])
  user     User        @relation("AuditTrailEntry", fields: [userId], references: [id])

  @@index([documentId])
  @@index([userId])
}

model BatchRecord {
  id                      String         @id @default(cuid())
  batchNumber             String         @unique
  productName             String
  lotNumber               String         @unique
  startDate               DateTime
  endDate                 DateTime?
  quantity                Float
  unit                    String
  status                  GMPBatchStatus @default(IN_PROGRESS)
  facilityId              String
  operatorId              String
  qualityData             Json           @default("{}")
  environmentalConditions Json           @default("{}")
  notes                   String?
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt

  facility     Facility               @relation(fields: [facilityId], references: [id])
  operator     User                   @relation("BatchRecordOperator", fields: [operatorId], references: [id])
  processSteps ProcessStep[]
  qualitySpecs QualitySpecification[]
  testResults  TestResult[]

  @@index([facilityId])
  @@index([status])
  @@index([batchNumber])
}

model ProcessStep {
  id            String    @id @default(cuid())
  batchRecordId String
  stepNumber    Int
  stepName      String
  description   String
  parameters    Json      @default("{}")
  startTime     DateTime
  endTime       DateTime?
  operatorId    String
  status        String    @default("PENDING")
  notes         String?

  batchRecord BatchRecord @relation(fields: [batchRecordId], references: [id])
  operator    User        @relation("ProcessStepOperator", fields: [operatorId], references: [id])

  @@index([batchRecordId])
}

model QualitySpecification {
  id            String  @id @default(cuid())
  batchRecordId String
  parameter     String
  targetValue   Float?
  minValue      Float?
  maxValue      Float?
  unit          String?
  testMethod    String?
  isActive      Boolean @default(true)

  batchRecord BatchRecord  @relation(fields: [batchRecordId], references: [id])
  testResults TestResult[]

  @@index([batchRecordId])
}

model TestResult {
  id             String   @id @default(cuid())
  batchRecordId  String
  qualitySpecId  String
  measuredValue  Float
  result         String // "PASS" or "FAIL"
  testDate       DateTime @default(now())
  testerId       String
  instrumentUsed String?
  notes          String?

  batchRecord BatchRecord          @relation(fields: [batchRecordId], references: [id])
  qualitySpec QualitySpecification @relation(fields: [qualitySpecId], references: [id])
  tester      User                 @relation("TestResultTester", fields: [testerId], references: [id])

  @@index([batchRecordId])
  @@index([qualitySpecId])
}

model Deviation {
  id               String            @id @default(cuid())
  deviationNumber  String            @unique
  title            String
  description      String
  severity         DeviationSeverity
  status           DeviationStatus   @default(OPEN)
  detectedDate     DateTime
  facilityId       String
  reportedById     String
  assignedToId     String?
  rootCause        String?
  correctiveAction String?
  preventiveAction String?
  targetCloseDate  DateTime?
  actualCloseDate  DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  facility   Facility @relation(fields: [facilityId], references: [id])
  reportedBy User     @relation("DeviationReporter", fields: [reportedById], references: [id])
  assignedTo User?    @relation("DeviationAssignee", fields: [assignedToId], references: [id])

  @@index([facilityId])
  @@index([status])
  @@index([severity])
}

model TrainingRecord {
  id                String    @id @default(cuid())
  userId            String
  trainingTitle     String
  trainingType      String
  completionDate    DateTime
  expiryDate        DateTime?
  score             Float?
  instructorId      String?
  certificateNumber String?
  isValid           Boolean   @default(true)
  facilityId        String

  user       User     @relation("TrainingRecordUser", fields: [userId], references: [id])
  instructor User?    @relation("TrainingRecordInstructor", fields: [instructorId], references: [id])
  facility   Facility @relation(fields: [facilityId], references: [id])

  @@index([userId])
  @@index([facilityId])
  @@index([expiryDate])
}

// =============================================
// GREENHOUSE DESIGN & CAD SYSTEM MODELS
// =============================================

model GreenhouseDesign {
  id            String   @id @default(cuid())
  name          String
  description   String?
  facilityId    String
  userId        String
  status        DesignStatus @default(DRAFT)
  version       Int      @default(1)
  
  // Basic dimensions and properties
  width         Float    // meters
  length        Float    // meters
  height        Float    // meters
  sideHeight    Float?   // meters
  area          Float    // square meters
  volume        Float    // cubic meters
  
  // Design configuration
  structureType StructureType @default(GUTTER_CONNECTED)
  glazingType   GlazingType   @default(POLYCARBONATE)
  frameType     FrameType     @default(STEEL)
  roofType      RoofType      @default(GABLE)
  
  // Forge integration
  forgeUrn         String? // Autodesk Forge URN
  forgeViewToken   String? // Viewer token
  forgeBucketKey   String? // S3/Forge bucket
  forgeObjectKey   String? // Object key in bucket
  
  // Design data
  designData    Json     // Complete design configuration
  thumbnail     String?  // Thumbnail URL
  blueprints    String[] // Blueprint image URLs
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  facility      Facility @relation(fields: [facilityId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
  zones         GreenhouseZone[]
  equipment     GreenhouseEquipment[]
  exports       DesignExport[]
  revisions     DesignRevision[]
  
  @@index([facilityId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model GreenhouseZone {
  id            String   @id @default(cuid())
  designId      String
  name          String
  description   String?
  zoneType      ZoneType @default(GROWING)
  
  // Physical properties
  x             Float    // X position in design
  y             Float    // Y position in design
  width         Float    // Zone width
  length        Float    // Zone length
  height        Float    // Zone height
  area          Float    // Zone area
  
  // Environmental settings
  targetTemp    Float?   // Target temperature (°C)
  targetHumidity Float?  // Target humidity (%)
  targetCO2     Int?     // Target CO2 (ppm)
  targetVPD     Float?   // Target VPD (kPa)
  
  // Growing parameters
  plantDensity  Float?   // Plants per m²
  cropType      String?  // Type of crop
  growthStage   String?  // Current growth stage
  
  // Configuration
  config        Json     // Zone-specific configuration
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  design        GreenhouseDesign @relation(fields: [designId], references: [id], onDelete: Cascade)
  equipment     GreenhouseEquipment[]
  sensors       ZoneSensor[]
  climateData   ClimateReading[]
  irrigation    IrrigationZone[]
  lighting      LightingZone[]
  photoReports  PhotoReport[]
  
  @@index([designId])
  @@index([zoneType])
}

model GreenhouseEquipment {
  id            String        @id @default(cuid())
  designId      String?
  zoneId        String?
  name          String
  equipmentType EquipmentType
  
  // Physical properties
  x             Float?        // X position
  y             Float?        // Y position
  z             Float?        // Z position (height)
  width         Float?        // Equipment width
  length        Float?        // Equipment length
  height        Float?        // Equipment height
  
  // Technical specifications
  manufacturer  String?
  model         String?
  capacity      Float?        // Capacity (various units)
  powerRating   Float?        // Power consumption (watts)
  efficiency    Float?        // Efficiency rating
  
  // Configuration
  settings      Json          // Equipment-specific settings
  specifications Json         // Technical specifications
  
  // Status
  status        EquipmentStatus @default(ACTIVE)
  isActive      Boolean       @default(false)
  
  // Timestamps
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  design        GreenhouseDesign? @relation(fields: [designId], references: [id])
  zone          GreenhouseZone?   @relation(fields: [zoneId], references: [id])
  sensors       EquipmentSensor[]
  
  @@index([designId])
  @@index([zoneId])
  @@index([equipmentType])
  @@index([status])
}

model ZoneSensor {
  id            String     @id @default(cuid())
  zoneId        String
  sensorType    SensorType
  name          String
  
  // Physical properties
  x             Float?     // X position in zone
  y             Float?     // Y position in zone
  z             Float?     // Z position (height)
  
  // Configuration
  minValue      Float?     // Minimum reading value
  maxValue      Float?     // Maximum reading value
  unit          String     // Measurement unit
  accuracy      Float?     // Sensor accuracy
  
  // Status
  isActive      Boolean    @default(true)
  lastReading   Float?     // Last sensor reading
  lastReadingAt DateTime?  // Timestamp of last reading
  batteryLevel  Float?     // Battery level (0-100)
  
  // Timestamps
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // Relations
  zone          GreenhouseZone @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  readings      SensorReading[]
  alerts        SensorAlert[]
  alertConfigurations AlertConfiguration[]
  alertLogs     AlertLog[]
  
  @@index([zoneId])
  @@index([sensorType])
  @@index([isActive])
}

model EquipmentSensor {
  id            String              @id @default(cuid())
  equipmentId   String
  sensorType    SensorType
  name          String
  
  // Configuration
  minValue      Float?
  maxValue      Float?
  unit          String
  accuracy      Float?
  
  // Status
  isActive      Boolean             @default(true)
  lastReading   Float?
  lastReadingAt DateTime?
  
  // Timestamps
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  // Relations
  equipment     GreenhouseEquipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  readings      SensorReading[]
  
  @@index([equipmentId])
  @@index([sensorType])
}

model ClimateReading {
  id            String         @id @default(cuid())
  zoneId        String
  
  // Environmental readings
  temperature   Float?         // °C
  humidity      Float?         // %
  co2           Int?           // ppm
  lightLevel    Float?         // PPFD (μmol/m²/s)
  vpd           Float?         // kPa
  airflow       Float?         // m/s
  soilTemp      Float?         // °C
  soilMoisture  Float?         // %
  soilPH        Float?         // pH
  soilEC        Float?         // EC (dS/m)
  
  // Metadata
  readingAt     DateTime       @default(now())
  source        String?        // Sensor source
  
  // Relations
  zone          GreenhouseZone @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  
  @@index([zoneId, readingAt])
  @@index([readingAt])
}

model SensorAlert {
  id            String      @id @default(cuid())
  sensorId      String
  alertType     AlertType
  severity      AlertSeverity @default(MEDIUM)
  
  // Alert details
  message       String
  value         Float?      // Value that triggered alert
  threshold     Float?      // Threshold that was exceeded
  
  // Status
  status        AlertStatus @default(ACTIVE)
  acknowledgedAt DateTime?
  acknowledgedBy String?
  resolvedAt    DateTime?
  
  // Timestamps
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  sensor        ZoneSensor  @relation(fields: [sensorId], references: [id])
  
  @@index([sensorId])
  @@index([status])
  @@index([severity])
  @@index([createdAt])
}

// Alert Detection System Models
model AlertConfiguration {
  id              String        @id @default(cuid())
  facilityId      String
  sensorId        String
  name            String        // Descriptive name for the alert rule
  enabled         Boolean       @default(true)
  
  // Alert type and condition
  alertType       AlertType
  condition       AlertCondition // gt, gte, lt, lte, between
  threshold       Float         // Primary threshold value
  thresholdMax    Float?        // For 'between' condition (range)
  
  // Severity and timing
  severity        AlertSeverity @default(MEDIUM)
  duration        Int?          // Minutes condition must persist before triggering
  cooldownMinutes Int           @default(15) // Prevent alert spam
  
  // Actions and notifications
  actions         Json          // { email: true, sms: false, push: true, webhook: false }
  notificationMessage String?   // Custom notification message template
  
  // Metadata and tracking
  metadata        Json?         // Additional configuration data
  lastTriggeredAt DateTime?     // Last time this alert was triggered
  triggerCount    Int           @default(0) // Total number of times triggered
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  facility        Facility      @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  sensor          ZoneSensor    @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  alertLogs       AlertLog[]
  
  @@index([facilityId])
  @@index([sensorId])
  @@index([enabled])
  @@index([alertType])
  @@index([facilityId, sensorId])
  @@index([enabled, sensorId])
}

model AlertLog {
  id              String             @id @default(cuid())
  alertConfigId   String
  sensorId        String
  facilityId      String
  
  // Alert details
  alertType       AlertType
  severity        AlertSeverity
  message         String            // Generated alert message
  
  // Values
  triggeredValue  Float             // The sensor value that triggered the alert
  thresholdValue  Float             // The threshold that was exceeded
  unit            String?           // Unit of measurement
  
  // Status
  status          AlertStatus       @default(ACTIVE)
  acknowledgedBy  String?           // User ID who acknowledged
  acknowledgedAt  DateTime?
  resolvedAt      DateTime?
  resolvedBy      String?           // User ID who resolved
  resolutionNotes String?           // Notes on how it was resolved
  
  // Context and metadata
  sensorName      String?           // Sensor name at time of alert
  location        String?           // Sensor location
  metadata        Json?             // Additional context (historical data, correlations, etc.)
  
  // Timestamps
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  alertConfig     AlertConfiguration @relation(fields: [alertConfigId], references: [id], onDelete: Cascade)
  sensor          ZoneSensor         @relation(fields: [sensorId], references: [id])
  facility        Facility           @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  acknowledger    User?              @relation("AlertAcknowledger", fields: [acknowledgedBy], references: [id])
  resolver        User?              @relation("AlertResolver", fields: [resolvedBy], references: [id])
  
  @@index([alertConfigId])
  @@index([sensorId])
  @@index([facilityId])
  @@index([status])
  @@index([severity])
  @@index([createdAt])
  @@index([facilityId, status])
  @@index([facilityId, createdAt])
  @@index([sensorId, status])
}

model IrrigationZone {
  id            String         @id @default(cuid())
  zoneId        String
  name          String
  irrigationType IrrigationType @default(DRIP)
  
  // Configuration
  flowRate      Float?         // L/min
  pressure      Float?         // bar
  schedule      Json           // Irrigation schedule
  duration      Int?           // minutes per cycle
  frequency     Int?           // times per day
  
  // Nutrients
  nutrientMix   Json?          // Nutrient recipe
  phTarget      Float?         // Target pH
  ecTarget      Float?         // Target EC
  
  // Status
  isActive      Boolean        @default(true)
  lastRun       DateTime?
  nextRun       DateTime?
  
  // Timestamps
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  zone          GreenhouseZone @relation(fields: [zoneId], references: [id])
  events        IrrigationEvent[]
  
  @@index([zoneId])
  @@index([irrigationType])
}

model IrrigationEvent {
  id              String          @id @default(cuid())
  irrigationZoneId String
  
  // Event details
  startTime       DateTime
  endTime         DateTime?
  duration        Int?            // actual duration in minutes
  volume          Float?          // liters delivered
  
  // Status
  status          EventStatus     @default(SCHEDULED)
  
  // Relations
  irrigationZone  IrrigationZone  @relation(fields: [irrigationZoneId], references: [id])
  
  @@index([irrigationZoneId])
  @@index([startTime])
}

model LightingZone {
  id            String         @id @default(cuid())
  zoneId        String
  name          String
  lightingType  LightingType   @default(LED)
  
  // Configuration
  intensity     Float?         // PPFD (μmol/m²/s)
  spectrum      Json?          // Light spectrum configuration
  schedule      Json           // Lighting schedule
  powerDraw     Float?         // Watts
  
  // Status
  isActive      Boolean        @default(true)
  currentLevel  Float?         // Current intensity %
  
  // Timestamps
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  zone          GreenhouseZone @relation(fields: [zoneId], references: [id])
  events        LightingEvent[]
  
  @@index([zoneId])
  @@index([lightingType])
}

model LightingEvent {
  id              String        @id @default(cuid())
  lightingZoneId  String
  
  // Event details
  startTime       DateTime
  endTime         DateTime?
  intensity       Float         // PPFD
  spectrum        Json?         // Spectrum configuration
  
  // Status
  status          EventStatus   @default(SCHEDULED)
  
  // Relations
  lightingZone    LightingZone  @relation(fields: [lightingZoneId], references: [id])
  
  @@index([lightingZoneId])
  @@index([startTime])
}


model DesignRevision {
  id            String           @id @default(cuid())
  designId      String
  version       Int
  
  // Revision details
  title         String?
  description   String?
  changedBy     String
  changeType    RevisionType     @default(MINOR)
  
  // Data
  designData    Json             // Complete design state at this revision
  changes       Json?            // Summary of changes made
  
  // Timestamps
  createdAt     DateTime         @default(now())
  
  // Relations
  design        GreenhouseDesign @relation(fields: [designId], references: [id], onDelete: Cascade)
  
  @@index([designId])
  @@index([version])
  @@index([createdAt])
}

model DesignExport {
  id            String           @id @default(cuid())
  designId      String
  exportType    ExportType
  
  // Export details
  fileName      String
  fileSize      Int?             // bytes
  filePath      String           // S3 path or URL
  format        ExportFormat
  
  // Configuration
  options       Json?            // Export options used
  quality       ExportQuality    @default(STANDARD)
  
  // Status
  status        ExportStatus     @default(PROCESSING)
  errorMessage  String?
  
  // Timestamps
  createdAt     DateTime         @default(now())
  completedAt   DateTime?
  
  // Relations
  design        GreenhouseDesign @relation(fields: [designId], references: [id])
  
  @@index([designId])
  @@index([exportType])
  @@index([status])
  @@index([createdAt])
}

// =============================================
// ENUMS FOR GREENHOUSE DESIGN SYSTEM
// =============================================

enum DesignStatus {
  DRAFT
  IN_REVIEW
  APPROVED
  IN_CONSTRUCTION
  COMPLETED
  ARCHIVED
}

enum StructureType {
  GUTTER_CONNECTED
  FREESTANDING
  TUNNEL
  LEAN_TO
  RIDGE_FURROW
}

enum GlazingType {
  GLASS
  POLYCARBONATE
  POLYETHYLENE
  ACRYLIC
}

enum FrameType {
  STEEL
  ALUMINUM
  WOOD
  COMPOSITE
}

enum RoofType {
  GABLE
  GOTHIC
  BARREL_VAULT
  SAWTOOTH
  FLAT
}

enum ZoneType {
  GROWING
  PROPAGATION
  STORAGE
  PROCESSING
  OFFICE
  MAINTENANCE
  WALKWAY
}

enum EquipmentType {
  HVAC
  IRRIGATION
  LIGHTING
  VENTILATION
  HEATING
  COOLING
  CO2_INJECTION
  FERTIGATION
  MONITORING
  AUTOMATION
  SHADING
  MISTING
}


enum SensorType {
  TEMPERATURE
  HUMIDITY
  CO2
  LIGHT
  SOIL_MOISTURE
  SOIL_TEMP
  SOIL_PH
  SOIL_EC
  AIRFLOW
  PRESSURE
  WATER_LEVEL
  FLOW_RATE
}

enum IrrigationType {
  DRIP
  OVERHEAD
  NFT
  DWC
  EBB_FLOW
  MISTING
  FOGGER
}

enum LightingType {
  LED
  HPS
  CMH
  FLUORESCENT
  NATURAL
}

enum EventStatus {
  SCHEDULED
  RUNNING
  COMPLETED
  CANCELLED
  FAILED
}


enum AlertType {
  TEMPERATURE_HIGH
  TEMPERATURE_LOW
  HUMIDITY_HIGH
  HUMIDITY_LOW
  CO2_HIGH
  CO2_LOW
  EQUIPMENT_FAILURE
  SENSOR_FAILURE
  WATER_LEAK
  POWER_FAILURE
  MAINTENANCE_DUE
}

enum AlertCondition {
  GT      // greater than
  GTE     // greater than or equal
  LT      // less than
  LTE     // less than or equal
  BETWEEN // outside range (value < min OR value > max)
  RATE    // rate of change exceeds threshold
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertStatus {
  ACTIVE
  ACKNOWLEDGED
  RESOLVED
  IGNORED
}

enum RevisionType {
  MAJOR
  MINOR
  PATCH
  HOTFIX
}

enum ExportType {
  BLUEPRINT
  REPORT
  SPECIFICATION
  BOM
  PROPOSAL
  MAINTENANCE_GUIDE
}

enum ExportFormat {
  PDF
  DWG
  XLSX
  DOCX
  IFC
  GLTF
  OBJ
  PNG
  JPG
}

enum ExportQuality {
  DRAFT
  STANDARD
  HIGH
  PRESENTATION
}

enum ExportStatus {
  QUEUED
  PROCESSING
  COMPLETED
  FAILED
}

// Chat system models
model ChatChannel {
  id          String   @id @default(cuid())
  name        String
  description String?
  facilityId  String
  facility    Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  isPrivate   Boolean  @default(false)
  createdBy   String
  createdByUser User   @relation(fields: [createdBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  messages    ChatMessage[]
  members     FacilityMember[]
  
  @@index([facilityId])
  @@index([createdBy])
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  channelId String
  channel   ChatChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  reactions MessageReaction[]
  
  @@index([channelId])
  @@index([userId])
  @@index([createdAt])
}

model FacilityMember {
  id         String   @id @default(cuid())
  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  role       FacilityRole @default(VIEWER)
  joinedAt   DateTime @default(now())
  
  chatChannels ChatChannel[]
  
  @@unique([facilityId, userId])
  @@index([facilityId])
  @@index([userId])
}

model ConsolidationCenter {
  id          String   @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  zipCode     String
  capacity    Float    // in cubic feet or similar
  isActive    Boolean  @default(true)
  coordinates Json?    // lat/lng
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  orders      ConsolidationOrder[]
  
  @@index([city])
  @@index([state])
  @@index([isActive])
}

model ConsolidationOrder {
  id                   String   @id @default(cuid())
  buyerId              String
  consolidationCenterId String
  consolidationCenter  ConsolidationCenter @relation(fields: [consolidationCenterId], references: [id])
  status               String   @default("pending")
  totalWeight          Float?
  totalValue           Float?
  scheduledPickup      DateTime?
  actualPickup         DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  @@index([buyerId])
  @@index([consolidationCenterId])
  @@index([status])
}

model EnergyReading {
  id         String   @id @default(cuid())
  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  
  readingType String // 'electricity', 'gas', 'water', 'solar'
  value       Float
  unit        String // 'kWh', 'cubic_meters', 'gallons', etc.
  cost        Float?
  
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([facilityId, timestamp])
  @@index([readingType])
}

model EnergyBaseline {
  id         String   @id @default(cuid())
  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  
  baselineType String // 'monthly', 'seasonal', 'annual'
  readingType  String // 'electricity', 'gas', 'water', 'solar'
  value        Float
  unit         String
  
  periodStart DateTime
  periodEnd   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([facilityId, baselineType])
  @@index([readingType])
}

// =====================================================
// HMI (Human-Machine Interface) Persistence Models
// =====================================================

model HMIZone {
  id         String   @id @default(cuid())
  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)

  name       String
  enabled    Boolean  @default(true)
  // Store equipment IDs assigned to the zone
  equipment  Json

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([facilityId])
  @@unique([facilityId, name])
}

model HMIAutomationRule {
  id           String   @id @default(cuid())
  facilityId   String
  facility     Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)

  name         String
  enabled      Boolean  @default(true)
  // Arbitrary rule conditions and actions in a structured format
  conditions   Json
  actions      Json
  lastTriggered DateTime?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([facilityId])
}

model HMILayout {
  id         String   @id @default(cuid())
  facilityId String
  roomId     String?
  facility   Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)

  // Positions keyed by equipment ID
  positions  Json

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([facilityId])
  @@unique([facilityId, roomId])
}

model HMIAlarmAcknowledgement {
  id             String   @id @default(cuid())
  facilityId     String
  facility       Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  equipmentId    String?
  message        String
  acknowledgedBy String
  acknowledgedAt DateTime @default(now())
  resolvedAt     DateTime?
  notes          String?

  createdAt      DateTime @default(now())

  @@index([facilityId])
}

// =====================================================
// SOP (Standard Operating Procedures) System
// =====================================================

model SOPDocument {
  id             String   @id @default(cuid())
  title          String
  category       String   // cultivation, processing, quality, safety, compliance, equipment, general
  subcategory    String?
  version        String   @default("1.0")
  status         String   @default("draft") // draft, review, approved, archived
  description    String   @db.Text
  
  // Content stored as JSON for flexibility
  content        Json     // Array of sections with steps
  materials      String[] // Required materials
  safetyNotes    String[] // Safety considerations
  tags           String[]
  
  // Metadata
  estimatedTime  Int      // in minutes
  difficulty     String   // beginner, intermediate, advanced
  frequency      String?  // daily, weekly, monthly, as-needed
  
  // Authorship and approval
  createdBy      String
  author         User     @relation("SOPAuthor", fields: [createdBy], references: [id])
  reviewedBy     String[]
  approvedBy     String?
  approvedDate   DateTime?
  
  // Relationships
  facilityId     String?
  facility       Facility? @relation(fields: [facilityId], references: [id])
  
  // Tracking
  views          Int      @default(0)
  completions    Int      @default(0)
  averageRating  Float?
  
  // Dates
  effectiveDate  DateTime @default(now())
  reviewDate     DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  checkIns       SOPCheckIn[]
  revisions      SOPRevision[]
  
  @@index([category, status])
  @@index([facilityId])
  @@index([createdBy])
}

// =====================================================
// Compliance Core (Pesticides, HACCP, CoC, Certificates)
// =====================================================

model PesticideInventoryItem {
  id             String    @id @default(cuid())
  facilityId     String
  facility       Facility  @relation(fields: [facilityId], references: [id])
  productName    String
  epaRegNo       String?
  lotNumber      String?
  quantity       Float     @default(0)
  unit           String    @default("L")
  expiryDate     DateTime?
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([facilityId])
  @@index([productName])

  // Back-relation to applications
  applications PesticideApplication[] @relation("PesticideInventoryApplications")
}

// =====================================================
// Financial Core (Accounts, Journals, Invoices, Payments, Budgets)
// =====================================================

model Account {
  id          String    @id @default(cuid())
  facilityId  String
  facility    Facility  @relation(fields: [facilityId], references: [id])
  name        String
  code        String?
  type        String    // asset, liability, equity, revenue, expense
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  journalLines JournalLine[]

  @@index([facilityId])
  @@index([type])
}

model JournalEntry {
  id          String    @id @default(cuid())
  facilityId  String
  facility    Facility  @relation(fields: [facilityId], references: [id])
  entryDate   DateTime  @default(now())
  memo        String?
  createdAt   DateTime  @default(now())

  lines       JournalLine[]

  @@index([facilityId, entryDate])
}

model JournalLine {
  id             String       @id @default(cuid())
  entryId        String
  entry          JournalEntry @relation(fields: [entryId], references: [id])
  accountId      String
  account        Account      @relation(fields: [accountId], references: [id])
  description    String?
  debit          Float        @default(0)
  credit         Float        @default(0)
}

model BillingInvoice {
  id          String    @id @default(cuid())
  facilityId  String
  facility    Facility  @relation(fields: [facilityId], references: [id])
  number      String
  status      String    @default("draft") // draft, sent, paid, void
  issueDate   DateTime  @default(now())
  dueDate     DateTime?
  customer    String?
  currency    String    @default("USD")
  total       Float     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  lines       BillingInvoiceLine[]
  payments    BillingPayment[]

  @@unique([facilityId, number])
  @@index([facilityId, status])
}

model BillingInvoiceLine {
  id          String   @id @default(cuid())
  invoiceId   String
  invoice     BillingInvoice  @relation(fields: [invoiceId], references: [id])
  description String
  quantity    Float    @default(1)
  unitPrice   Float    @default(0)
  amount      Float    @default(0)
}

model BillingPayment {
  id            String   @id @default(cuid())
  facilityId    String
  facility      Facility @relation(fields: [facilityId], references: [id])
  invoiceId     String?
  invoice       BillingInvoice? @relation(fields: [invoiceId], references: [id])
  amount        Float
  currency      String   @default("USD")
  method        String   @default("other") // stripe, ach, cash, check, other
  reference     String?
  receivedAt    DateTime @default(now())
  stripeIntent  String?

  @@index([facilityId, receivedAt])
  @@index([invoiceId])
}

model Budget {
  id          String   @id @default(cuid())
  facilityId  String
  facility    Facility @relation(fields: [facilityId], references: [id])
  periodMonth String   // YYYY-MM
  category    String
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([facilityId, periodMonth, category])
  @@index([facilityId, periodMonth])
}

model PesticideApplication {
  id                      String    @id @default(cuid())
  facilityId              String
  facility                Facility  @relation(fields: [facilityId], references: [id])
  inventoryItemId         String?
  inventoryItem           PesticideInventoryItem? @relation("PesticideInventoryApplications", fields: [inventoryItemId], references: [id])
  applicationDate         DateTime @default(now())
  productName             String
  dose                    Float
  doseUnit                String    @default("ml/L")
  area                    String?
  operatorUserId          String?
  operator                User?     @relation("PesticideOperator", fields: [operatorUserId], references: [id])
  preHarvestIntervalDays  Int?      // PHI
  notes                   String?   @db.Text
  createdAt               DateTime  @default(now())

  @@index([facilityId, applicationDate])
  @@index([inventoryItemId])
}

model ComplianceBatch {
  id          String    @id @default(cuid())
  facilityId  String
  facility    Facility  @relation(fields: [facilityId], references: [id])
  batchCode   String
  batchType   String    // plant, product, material
  parentId    String?
  parent      ComplianceBatch? @relation("BatchParent", fields: [parentId], references: [id])
  children    ComplianceBatch[] @relation("BatchParent")
  createdAt   DateTime  @default(now())

  transfersFrom BatchTransfer[] @relation("FromBatch")
  transfersTo   BatchTransfer[] @relation("ToBatch")
  coas          CertificateOfAnalysis[]

  @@unique([facilityId, batchCode])
  @@index([facilityId])
}

model BatchTransfer {
  id          String    @id @default(cuid())
  fromBatchId String
  fromBatch   ComplianceBatch @relation("FromBatch", fields: [fromBatchId], references: [id])
  toBatchId   String
  toBatch     ComplianceBatch @relation("ToBatch", fields: [toBatchId], references: [id])
  quantity    Float?
  unit        String?
  reason      String?
  timestamp   DateTime  @default(now())

  @@index([fromBatchId])
  @@index([toBatchId])
}

model CertificateOfAnalysis {
  id          String    @id @default(cuid())
  batchId     String
  batch       ComplianceBatch @relation(fields: [batchId], references: [id])
  labName     String
  reportUrl   String?
  resultSummary String?
  passed      Boolean   @default(false)
  createdAt   DateTime  @default(now())

  @@index([batchId])
}

model HACCPPlan {
  id          String    @id @default(cuid())
  facilityId  String
  facility    Facility  @relation(fields: [facilityId], references: [id])
  version     String    @default("1.0")
  status      String    @default("approved") // draft, review, approved
  plan        Json
  lastUpdated DateTime  @default(now())

  ccpRecords  CCPRecord[]

  @@index([facilityId])
}

model CCPRecord {
  id          String    @id @default(cuid())
  facilityId  String
  facility    Facility  @relation(fields: [facilityId], references: [id])
  planId      String?
  plan        HACCPPlan? @relation(fields: [planId], references: [id])
  ccpName     String
  value       Float
  unit        String?
  limitMin    Float?
  limitMax    Float?
  compliant   Boolean   @default(true)
  notes       String?   @db.Text
  timestamp   DateTime  @default(now())

  @@index([facilityId, timestamp])
  @@index([planId])
}

model ComplianceCertificate {
  id          String    @id @default(cuid())
  facilityId  String
  facility    Facility  @relation(fields: [facilityId], references: [id])
  certType    String    // license, certification, training, organic
  issuer      String
  identifier  String?
  issueDate   DateTime?
  expiryDate  DateTime?
  fileUrl     String?
  status      String    @default("active") // active, expired, revoked
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([facilityId, certType])
  @@index([expiryDate])
}

model SOPCheckIn {
  id            String      @id @default(cuid())
  
  // SOP reference
  sopId         String
  sop           SOPDocument @relation(fields: [sopId], references: [id])
  
  // User performing the check-in
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  
  // Check-in details
  startTime     DateTime    @default(now())
  endTime       DateTime?
  completedSteps Json       // Array of completed step IDs
  notes         String?     @db.Text
  issues        String[]    // Any issues encountered
  
  // Location and context
  facilityId    String?
  facility      Facility?   @relation(fields: [facilityId], references: [id])
  locationId    String?     // Specific room/zone
  batchId       String?     // If tied to a specific batch
  
  // Verification
  verified      Boolean     @default(false)
  verifiedBy    String?
  verifiedAt    DateTime?
  // Audit metadata
  clientIp      String?
  userAgent     String?
  
  // Status
  status        String      @default("in_progress") // in_progress, completed, abandoned
  completionRate Float?     // Percentage of steps completed
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([sopId])
  @@index([userId])
  @@index([facilityId])
  @@index([status])
}

model SOPRevision {
  id            String      @id @default(cuid())
  
  sopId         String
  sop           SOPDocument @relation(fields: [sopId], references: [id])
  
  previousVersion String
  newVersion    String
  changeLog     String      @db.Text
  changedBy     String
  diffSummary   String?
  reviewedByUserId String?
  
  // Store the full content at time of revision
  previousContent Json
  
  createdAt     DateTime    @default(now())
  
  @@index([sopId])
}

// =====================================================
// Workforce Management System
// =====================================================

model Employee {
  id            String   @id @default(cuid())
  employeeCode  String   @unique
  
  // Personal Information
  firstName     String
  lastName      String
  email         String   @unique
  phone         String?
  
  // Employment Details
  position      String
  department    String
  hourlyRate    Float
  overtimeRate  Float?
  
  // Access and Permissions
  badgeNumber   String?  @unique
  accessZones   String[] // Array of zone IDs
  certifications String[]
  
  // Status
  status        String   @default("active") // active, inactive, terminated
  hireDate      DateTime
  terminationDate DateTime?
  
  // Relations
  facilityId    String
  facility      Facility @relation(fields: [facilityId], references: [id])
  
  userId        String?  @unique
  user          User?    @relation(fields: [userId], references: [id])
  
  timeEntries   TimeEntry[]
  workTasks     WorkTask[]
  schedules     LaborSchedule[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([facilityId])
  @@index([status])
}

model TimeEntry {
  id            String    @id @default(cuid())
  
  employeeId    String
  employee      Employee  @relation(fields: [employeeId], references: [id])
  
  // Clock times
  clockIn       DateTime
  clockOut      DateTime?
  breakStart    DateTime?
  breakEnd      DateTime?
  
  // Work details
  workType      String    // cultivation, harvest, processing, maintenance
  taskId        String?
  workTask      WorkTask? @relation(fields: [taskId], references: [id])
  
  location      String    // Facility or zone ID
  
  // Hours calculation
  regularHours  Float     @default(0)
  overtimeHours Float     @default(0)
  breakDuration Float     @default(0) // in minutes
  totalHours    Float     @default(0)
  
  // Payroll
  regularPay    Float     @default(0)
  overtimePay   Float     @default(0)
  totalPay      Float     @default(0)
  
  // Status
  status        String    @default("active") // active, completed, approved, disputed
  approvedBy    String?
  approvedAt    DateTime?
  
  notes         String?   @db.Text
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([employeeId])
  @@index([status])
  @@index([clockIn])
}

model WorkTask {
  id            String    @id @default(cuid())
  
  title         String
  description   String    @db.Text
  taskType      String    // watering, pruning, harvest, transplant, IPM, etc.
  
  // Assignment
  assignedTo    String?
  assignedEmployee Employee? @relation(fields: [assignedTo], references: [id])
  
  // Location
  facilityId    String
  facility      Facility  @relation(fields: [facilityId], references: [id])
  zoneId        String?
  batchId       String?
  
  // Timing
  scheduledDate DateTime
  startTime     DateTime?
  endTime       DateTime?
  estimatedHours Float
  actualHours   Float?
  
  // Priority and Status
  priority      String    @default("medium") // low, medium, high, critical
  status        String    @default("pending") // pending, assigned, in_progress, completed, cancelled
  
  // Requirements
  requiredSkills String[]
  requiredCerts String[]
  materials     String[]
  sopId         String?   // Link to SOP if applicable
  
  // Completion
  completedBy   String?
  completedAt   DateTime?
  completionNotes String? @db.Text
  qualityScore  Float?    // 0-100
  
  // Relations
  timeEntries   TimeEntry[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([facilityId])
  @@index([assignedTo])
  @@index([status])
  @@index([scheduledDate])
}

model LaborSchedule {
  id            String    @id @default(cuid())
  
  employeeId    String
  employee      Employee  @relation(fields: [employeeId], references: [id])
  
  // Schedule details
  date          DateTime
  shiftStart    DateTime
  shiftEnd      DateTime
  breakDuration Int       // in minutes
  
  // Work assignment
  department    String
  position      String
  location      String    // Specific zone or area
  
  status        String    @default("scheduled") // scheduled, confirmed, completed, cancelled
  
  notes         String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([employeeId])
  @@index([date])
  @@index([status])
}

// =====================================================
// Document Management System
// =====================================================

model DocumentCheckout {
  id            String    @id @default(cuid())
  
  documentId    String
  versionId     String
  
  // User checking out
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  userEmail     String
  
  // Checkout details
  checkedOutAt  DateTime  @default(now())
  expiresAt     DateTime
  checkedInAt   DateTime?
  
  // Lock type
  lockType      String    // exclusive, shared
  purpose       String    // edit, review, translate
  
  // Status
  isActive      Boolean   @default(true)
  autoExtended  Int       @default(0) // Number of auto-extensions
  
  // Changes made
  changesMade   Boolean   @default(false)
  changeSummary String?   @db.Text
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([documentId])
  @@index([userId])
  @@index([isActive])
}

// =====================================================
// Enhanced Project Management
// =====================================================

model ProjectTask {
  id            String    @id @default(cuid())
  
  projectId     String
  project       Project   @relation(fields: [projectId], references: [id])
  
  // Task details
  title         String
  description   String    @db.Text
  taskType      String    // planning, construction, electrical, plumbing, HVAC, testing
  
  // Dependencies
  dependencies  String[]  // IDs of tasks that must complete first
  blockedBy     String[]  // IDs of tasks blocking this one
  
  // Assignment
  assignedTo    String[]  // User IDs
  contractors   String[]  // External contractor IDs
  
  // Timeline
  plannedStart  DateTime
  plannedEnd    DateTime
  actualStart   DateTime?
  actualEnd     DateTime?
  
  // Progress
  status        String    @default("pending") // pending, in_progress, completed, delayed, blocked
  progress      Float     @default(0) // 0-100
  
  // Cost tracking
  estimatedCost Float?
  actualCost    Float?
  costVariance  Float?
  
  // Risk management
  riskLevel     String?   // low, medium, high
  riskFactors   String[]
  
  // Documentation
  documents     String[]  // Document IDs
  notes         String?   @db.Text
  
  // Milestones
  isMilestone   Boolean   @default(false)
  milestoneType String?   // phase_complete, inspection, payment
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([projectId])
  @@index([status])
  @@index([plannedStart])
}

model ProjectStakeholder {
  id            String    @id @default(cuid())
  
  projectId     String
  project       Project   @relation(fields: [projectId], references: [id])
  
  // Stakeholder info
  name          String
  email         String
  phone         String?
  company       String?
  role          String    // owner, contractor, inspector, vendor, investor
  
  // Permissions
  canView       Boolean   @default(true)
  canComment    Boolean   @default(false)
  canEdit       Boolean   @default(false)
  canApprove    Boolean   @default(false)
  
  // Notifications
  notifyOnUpdate Boolean  @default(true)
  notifyOnDelay Boolean   @default(true)
  notifyOnMilestone Boolean @default(true)
  preferredContact String  @default("email") // email, sms, both
  
  // Access
  lastAccessed  DateTime?
  accessCount   Int       @default(0)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([projectId])
  @@unique([projectId, email])
}

model ProjectUpdate {
  id            String    @id @default(cuid())
  
  projectId     String
  project       Project   @relation(fields: [projectId], references: [id])
  
  // Update details
  updateType    String    // progress, delay, milestone, risk, budget
  title         String
  description   String    @db.Text
  
  // Impact
  impactLevel   String    // none, low, medium, high, critical
  affectedTasks String[]  // Task IDs affected
  
  // Timeline impact
  delayDays     Int?
  newEndDate    DateTime?
  
  // Cost impact
  costImpact    Float?
  
  // Created by
  createdBy     String
  user          User      @relation(fields: [createdBy], references: [id])
  
  // Stakeholder notifications
  notifiedStakeholders String[] // Stakeholder IDs
  
  createdAt     DateTime  @default(now())
  
  @@index([projectId])
  @@index([updateType])
}

// ============================================
// Energy Billing & Revenue Sharing Models
// ============================================

model EnergyCustomer {
  id                    String   @id @default(cuid())
  email                 String   @unique
  name                  String
  company               String
  
  // Stripe integration
  stripeCustomerId      String   @unique
  stripePaymentMethodId String?
  paymentMethodType     String   // ach, card, wire
  
  // Facility details
  facilityAddress       String
  utilityCompany        String
  utilityAccountNumber  String
  
  // Agreement data
  agreementData         Json     // Stores signed agreement details
  agreementVersion      String
  agreementSignedAt     DateTime
  
  // Financial
  accumulatedCredit     Float    @default(0)
  status                String   @default("active") // active, paused, canceled
  
  // Relations
  invoices              EnergyInvoice[]
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([email])
  @@index([stripeCustomerId])
  @@index([status])
}

model EnergyInvoice {
  id                      String   @id @default(cuid())
  
  // Customer
  customerId              String
  customer                EnergyCustomer @relation(fields: [customerId], references: [id])
  stripeCustomerId        String
  stripeInvoiceId         String?
  stripePaymentIntentId   String?
  
  // Billing period
  periodStart             DateTime
  periodEnd               DateTime
  billingMonth            String
  
  // Baseline data
  baselineUsage           Float    // kWh
  baselineCost            Float    // $
  baselineWeatherNormalized Float  // kWh
  
  // Actual data
  actualUsage             Float    // kWh
  actualCost              Float    // $
  utilityBillId           String?
  
  // Savings calculation
  energySaved             Float    // kWh
  costSaved               Float    // $
  savingsPercentage       Float    // %
  
  // Revenue share
  vibeluxShare            Float    // $ (30%)
  customerSavings         Float    // $ (70%)
  
  // Payment
  paymentStatus           String   @default("pending") // pending, processing, paid, failed, disputed
  paymentMethod           String   // ach, card, wire, check
  paymentDate             DateTime?
  paidAt                  DateTime?
  dueDate                 DateTime
  
  // Metadata
  notes                   String?
  disputeReason           String?
  
  // Verification
  verified                Boolean  @default(false)
  verificationMethod      String   @default("automatic") // automatic, manual, third_party
  confidence              Float    // 0-100
  
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  @@index([customerId])
  @@index([paymentStatus])
  @@index([periodStart, periodEnd])
  @@index([stripeInvoiceId])
}

// ============================================
// Email Tracking Models
// ============================================

model EmailLog {
  id              String    @id @default(cuid())
  
  // Recipients
  recipients      String[]
  subject         String
  templateId      String?
  
  // Status
  status          String    // sent, failed, bounced, opened, clicked
  messageId       String?
  sendGridId      String?
  error           String?
  
  // Tracking
  sentAt          DateTime?
  openedAt        DateTime?
  clickedAt       DateTime?
  bouncedAt       DateTime?
  
  // Engagement
  engagements     EmailEngagement[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([status])
  @@index([sentAt])
  @@index([messageId])
}

model EmailEngagement {
  id          String   @id @default(cuid())
  
  emailLogId  String?
  emailLog    EmailLog? @relation(fields: [emailLogId], references: [id])
  
  messageId   String
  event       String   // open, click, bounce, spam, unsubscribe
  url         String?
  timestamp   DateTime
  
  createdAt   DateTime @default(now())
  
  @@index([messageId])
  @@index([event])
  @@index([timestamp])
}

model EmailPreference {
  id                  String    @id @default(cuid())
  
  email               String    @unique
  unsubscribed        Boolean   @default(false)
  unsubscribedAt      DateTime?
  unsubscribedGroups  Int[]     @default([])
  
  markedAsSpam        Boolean   @default(false)
  markedAsSpamAt      DateTime?
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  @@index([email])
  @@index([unsubscribed])
}

// ============================================
// Workflow Automation Models
// ============================================

model Workflow {
  id                String   @id @default(cuid())
  
  name              String
  description       String?
  category          String   // environmental, maintenance, compliance, custom
  
  // Workflow definition
  nodes             Json     // Workflow nodes and connections
  variables         Json     // Workflow variables
  triggers          Json     // Trigger conditions
  
  // Settings
  enabled           Boolean  @default(true)
  schedule          String?  // Cron expression
  
  // Execution stats
  lastRunAt         DateTime?
  runCount          Int      @default(0)
  errorCount        Int      @default(0)
  avgExecutionTime  Float?
  
  // Relations
  executions        WorkflowExecution[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([enabled])
  @@index([category])
}

model WorkflowExecution {
  id          String   @id @default(cuid())
  
  workflowId  String
  workflow    Workflow @relation(fields: [workflowId], references: [id])
  
  status      String   // running, completed, failed, cancelled
  startTime   DateTime
  endTime     DateTime?
  duration    Int?     // milliseconds
  
  // Execution context
  context     Json
  logs        Json[]
  error       String?
  
  createdAt   DateTime @default(now())
  
  @@index([workflowId])
  @@index([status])
  @@index([startTime])
}

// ============================================
// Visual Operations Models
// ============================================

model PhotoReport {
  id              String   @id @default(cuid())
  
  facilityId      String
  facility        Facility @relation(fields: [facilityId], references: [id])
  
  zoneId          String?
  zone            GreenhouseZone?    @relation(fields: [zoneId], references: [id])
  
  // Photo details
  photoUrl        String
  thumbnailUrl    String?
  
  // Metadata
  capturedBy      String   // User ID or device ID
  capturedAt      DateTime
  
  // Location
  location        Json?    // GPS coordinates, row/bench info
  
  // Analysis
  aiAnalysis      Json?    // AI detection results
  tags            String[]
  
  // Issue tracking
  issueType       String?  // pest, disease, deficiency, other
  severity        String?  // low, medium, high, critical
  resolved        Boolean  @default(false)
  resolvedAt      DateTime?
  
  // Quality metrics
  qualityScore    Float?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([facilityId])
  @@index([zoneId])
  @@index([capturedAt])
  @@index([issueType])
}

model QualityReport {
  id              String   @id @default(cuid())
  
  facilityId      String
  facility        Facility @relation(fields: [facilityId], references: [id])
  
  batchId         String?
  
  // Report type
  reportType      String   // harvest, processing, packaging, compliance
  
  // Quality metrics
  metrics         Json     // Flexible metrics based on report type
  overallScore    Float
  passedQA        Boolean
  
  // Compliance
  complianceChecks Json    // GMP, GACP, ISO checks
  
  // Generated by
  generatedBy     String   // User ID or system
  generatedAt     DateTime
  
  // Attachments
  attachments     String[] // URLs to documents, photos, certificates
  
  // Sign-off
  reviewedBy      String?
  reviewedAt      DateTime?
  approvedBy      String?
  approvedAt      DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([facilityId])
  @@index([batchId])
  @@index([reportType])
  @@index([generatedAt])
}

// ============================================
// Production Monitoring Models
// ============================================

model ProductionBatchLegacy {
  id              String   @id @default(cuid())
  
  facilityId      String
  facility        Facility @relation(fields: [facilityId], references: [id])
  
  batchNumber     String   @unique
  strain          String
  
  // Timeline
  plantedAt       DateTime
  harvestedAt     DateTime?
  
  // Quantities
  plantCount      Int
  expectedYield   Float
  actualYield     Float?
  
  // Quality
  qualityGrade    String?
  labResults      Json?
  
  // Tracking
  status          String   @default("active") // active, harvested, processed, sold
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([facilityId])
  @@index([status])
  @@index([plantedAt])
}

// ============================================
// System Health Models
// ============================================

model SystemHealth {
  id              String   @id @default(cuid())
  
  service         String   // api, database, redis, storage, etc.
  status          String   // healthy, degraded, down
  
  // Metrics
  responseTime    Float?   // ms
  errorRate       Float?   // percentage
  uptime          Float?   // percentage
  
  // Details
  message         String?
  details         Json?
  
  checkedAt       DateTime @default(now())
  
  @@index([service])
  @@index([status])
  @@index([checkedAt])
}

model SystemMetric {
  id          String   @id @default(cuid())
  
  metric      String   // cpu, memory, disk, network, etc.
  value       Float
  unit        String
  
  // Context
  service     String?
  host        String?
  
  timestamp   DateTime @default(now())
  
  @@index([metric])
  @@index([timestamp])
  @@index([service])
}

